{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Component } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography, TextField, Button, Box, LinearProgress } from '@material-ui/core';\nimport { IconText } from 'components/atoms';\nimport { SectionHeader } from 'components/molecules';\nimport AlertMassage from '../../../../components/helper/AlertMessage';\nimport MetaTitle from 'components/helper/MetaTitle';\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    background: 'transparent',\n    borderRadius: 0\n  },\n  iconText: {\n    fontWeight: 700,\n    marginLeft: theme.spacing(2)\n  },\n  form: {\n    '& .MuiTextField-root': {\n      background: theme.palette.background.paper\n    },\n    '& .MuiOutlinedInput-input': {\n      background: theme.palette.background.paper\n    }\n  },\n  inputTitle: {\n    fontWeight: 700,\n    marginBottom: theme.spacing(1)\n  },\n  uploadButton: {\n    display: 'flex',\n    justifyContent: 'center',\n    border: '1px solid transparent',\n    background: theme.palette.alternate.dark,\n    textTransform: 'lowercase',\n    '& .icon-text': {\n      width: 'auto'\n    },\n    [theme.breakpoints.down('xs')]: {\n      justifyContent: 'flex-start'\n    }\n  }\n}));\n\nconst Application = props => {\n  const {\n    api_data,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"api_data\", \"className\"]); // console.log('api', api_data);\n\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  const [status, setStatusBase] = React.useState('');\n  const [fileName, setFileName] = React.useState(''); // console.log(status);\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(MetaTitle, {\n    title: `${api_data.title} | OnlineAarogya}`,\n    metaKeyWord: \"Jobs, OnlineAarogya\",\n    metaDescription: \"ACPL is a start-up in the field of medical healthcare including tele-medicine. The software platform will enable patients to search doctors for various specialties, check their profile, book appointment, and take consultation. The company is going to start the pilot launch by end of Aug 2021 and a full-scale launch of services by end of Oct 2021. The company\\u2019s mission is to create medical healthcare eco-system accessible, easier and better in terms of quality especially serving to the rural and non-metro geographies, which constitutes more than 75% of the population.\"\n  }), __jsx(SectionHeader, {\n    title: \"Apply for this job\" // subtitle=\"After 3 days all of your offers will arrive and you will have another 7 days to select your new company.\"\n    ,\n    subtitleProps: {\n      variant: 'body1',\n      color: 'textPrimary'\n    },\n    \"data-aos\": \"fade-up\",\n    align: isMd ? 'center' : 'left',\n    id: \"apply\"\n  }), __jsx(\"div\", {\n    className: classes.form\n  }, status ? __jsx(AlertMassage, {\n    key: status.key,\n    message: status.msg,\n    status: status.status\n  }) : null, __jsx(Formik, {\n    initialValues: {\n      full_name: '',\n      resume: '',\n      email: '',\n      massage: '',\n      nid: api_data.nid,\n      jobName: api_data.field_job_position\n    },\n    validationSchema: Yup.object().shape({\n      full_name: Yup.string().max(255).required('full_name is required'),\n      resume: Yup.string().max(255).required('resume is required'),\n      email: Yup.string().max(255).required('email is required')\n    }),\n    onSubmit: async (values, {\n      resetForm,\n      setSubmitting\n    }) => {\n      let data = new FormData();\n      data.append('title', values.full_name);\n      data.append('field_resume_c', values.resume);\n      data.append('email', values.email);\n      data.append('body', values.massage);\n      data.append('field_applied_for_', values.nid); // console.log('dsds',values.resume);\n\n      return fetch(`${process.env.NEXT_PUBLIC_DB_HOST}/api/post-contact`, {\n        method: 'post',\n        // mode: 'no-cors',\n        // headers: new Headers({\n        //   Accept: 'application/json',\n        // }),\n        body: data\n      }).then(response => response.json()).then(result => {\n        // console.log('Success:', result);\n        // console.log(result);\n        setStatusBase({\n          key: 22,\n          status: 'success',\n          msg: 'Your application for the' + values.jobName + 'job has been successfully submitted.'\n        });\n        setSubmitting(false);\n        resetForm(values);\n      }).catch(error => {\n        setStatusBase({\n          key: 22,\n          status: 'error',\n          msg: error\n        });\n      });\n    }\n  }, ({\n    errors,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    touched,\n    values,\n    resetForm\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Full name\"), __jsx(TextField, {\n    error: Boolean(touched.full_name && errors.full_name),\n    fullWidth: true,\n    helperText: touched.full_name && errors.full_name,\n    label: \"Enter your full name\" // margin=\"normal\"\n    ,\n    name: \"full_name\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.full_name,\n    variant: \"outlined\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"E-mail\"), __jsx(TextField, {\n    error: Boolean(touched.email && errors.email),\n    fullWidth: true,\n    helperText: touched.email && errors.email,\n    label: \"Enter your email address\",\n    name: \"email\",\n    type: \"email\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.email,\n    variant: \"outlined\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    component: \"label\",\n    color: \"primary\",\n    fullWidth: true,\n    size: \"large\",\n    className: classes.uploadButton\n  }, __jsx(IconText, {\n    fontIconClass: \"fas fa-cloud-upload-alt\",\n    color: theme.palette.primary.main,\n    title: \"Upload CV\",\n    typographyProps: {\n      className: classes.iconText\n    }\n  }), __jsx(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    onChange: event => {\n      setFieldValue('resume', event.target.files[0]);\n      setFileName(event.target.files[0].name);\n    },\n    style: {\n      display: 'none'\n    }\n  }), __jsx(\"span\", {\n    style: {\n      marginLeft: '10px'\n    }\n  }, fileName))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Message\"), __jsx(TextField, {\n    error: Boolean(touched.massage && errors.massage),\n    fullWidth: true,\n    helperText: touched.massage && errors.massage,\n    label: \"Message...\",\n    name: \"massage\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.massage,\n    variant: \"outlined\",\n    multiline: true,\n    rows: 4\n  })), __jsx(Box, {\n    my: 2,\n    ml: 1.4\n  }, __jsx(Button, {\n    color: \"primary\",\n    disabled: isSubmitting,\n    fullWidth: true,\n    size: \"large\",\n    type: \"submit\",\n    variant: \"contained\" // onClick={e => resetForm()}\n\n  }, \"Apply Now\"), isSubmitting && __jsx(LinearProgress, null)))))));\n};\n\nexport default Application;","map":null,"metadata":{},"sourceType":"module"}