{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid, Button, TextField } from '@material-ui/core';\nimport validate from 'validate.js';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  }\n}));\nconst schema = {\n  fullname: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 128\n    }\n  },\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    email: true,\n    length: {\n      maximum: 300\n    }\n  },\n  message: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    }\n  }\n};\n\nconst ContactForm = () => {\n  const classes = useStyles();\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === 'checkbox' ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"form\", {\n    name: \"contact-form\",\n    method: \"post\",\n    action: \"/submition.html?contact-form-submit-success=true\"\n  }, __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"form-name\",\n    value: \"contact-form\"\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\"\n  }, __jsx(\"strong\", null, \"Contact Us\")), __jsx(Typography, {\n    variant: \"h6\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, \"We carefully read and answer to all our emails.\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(TextField, {\n    placeholder: \"Full Name\",\n    label: \"Full Name *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"fullname\",\n    fullWidth: true,\n    helperText: hasError('fullname') ? formState.errors.fullname[0] : null,\n    error: hasError('fullname'),\n    onChange: handleChange,\n    type: \"text\",\n    value: formState.values.fullname || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(TextField, {\n    placeholder: \"E-mail\",\n    label: \"E-mail *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"email\",\n    fullWidth: true,\n    helperText: hasError('email') ? formState.errors.email[0] : null,\n    error: hasError('email'),\n    onChange: handleChange,\n    type: \"email\",\n    value: formState.values.email || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    placeholder: \"Message\",\n    label: \"Message *\",\n    variant: \"outlined\",\n    name: \"message\",\n    fullWidth: true,\n    helperText: hasError('message') ? formState.errors.message[0] : null,\n    error: hasError('message'),\n    onChange: handleChange,\n    multiline: true,\n    rows: 4,\n    value: formState.values.message || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true\n  }, \"Fields that are marked with * sign are required.\"), __jsx(Button, {\n    size: \"large\",\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: !formState.isValid\n  }, \"Send\")))));\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}