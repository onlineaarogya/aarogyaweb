{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography, TextField, Button, Divider, LinearProgress, MenuItem, FormControlLabel, Checkbox, FormGroup, IconButton, Avatar, Radio } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker, KeyboardDatePicker, DateTimePicker } from '@material-ui/pickers';\nimport Medical from './Medical'; // import FamilyMembers from '../Reusable/FamilyMembers';\n\nconst useStyles = makeStyles(theme => ({\n  inputTitle: {\n    fontWeight: 700,\n    marginBottom: theme.spacing(1)\n  },\n  root: {\n    flexGrow: 1,\n    width: '100%' // backgroundColor: theme.palette.background.paper,\n    // position: 'relative',\n    // left: '100px',\n\n  },\n  tabHeader: {\n    boxShadow: '0px 2px 4px -1px rgb(0 0 0 / 20%)',\n    backgroundColor: theme.palette.background.white\n  },\n  large: {\n    width: theme.spacing(10),\n    height: theme.spacing(10)\n  },\n  profileImage: {\n    display: 'flex !important',\n    justifyContent: 'center !important'\n  }\n})); // code for Tabs\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(Typography, _extends({\n    component: \"div\",\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-auto-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-auto-tab-${index}`\n  }, other), __jsx(Box, {\n    p: 3\n  }, children));\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`\n  };\n}\n\nconst General = props => {\n  const {\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  }); // code for tabs and\n\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  const {\n    0: imgPreview,\n    1: setImgPreview\n  } = useState('');\n  return (// <div className={className} {...rest}>\n    __jsx(\"div\", {\n      className: \"praveenk\"\n    }, __jsx(AppBar, {\n      position: \"static\",\n      color: \"\",\n      className: classes.tabHeader\n    }, __jsx(Tabs, {\n      value: value,\n      onChange: handleChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      \"aria-label\": \"scrollable auto tabs example\"\n    }, __jsx(Tab, _extends({\n      label: \"Profile\"\n    }, a11yProps(0))), __jsx(Tab, _extends({\n      label: \"Medial\"\n    }, a11yProps(1))), __jsx(Tab, _extends({\n      label: \"Family Members\"\n    }, a11yProps(2))), __jsx(Tab, _extends({\n      label: \"Family Doctor\"\n    }, a11yProps(3))))), __jsx(TabPanel, {\n      value: value,\n      index: 0\n    }, __jsx(Grid, {\n      container: true,\n      spacing: isMd ? 4 : 2\n    }, __jsx(Formik, {\n      initialValues: {\n        title: '',\n        first_name: '',\n        last_name: '',\n        dob: new Date(),\n        age: '',\n        height: '',\n        weight: '',\n        blood_group: '',\n        email: '',\n        state: '',\n        district: '',\n        city: '',\n        pinCode: '',\n        // mobile: editData.mobile,\n        address: '' // password: editData.password\n\n      },\n      validationSchema: Yup.object().shape({\n        title: Yup.string().max(255).required('Title is required'),\n        first_name: Yup.string().max(255).required('Fist Name is required')\n      }),\n      onSubmit: async (values, {\n        setSubmitting\n      }) => {\n        // POST request using fetch inside\n        // var newData = Object.assign(values, {\n        //   id: editData._id,\n        //   action: 'update'\n        // });\n        console.log(JSON.stringify(values, null, 2)); // const res = await getEmployeeAction(\n        //   JSON.stringify(newData, null, 2)\n        // );\n\n        if (res.success) {\n          // setSnackValue(res.message);\n          // setSnackStatus('success');\n          // handleClick();\n          setSubmitting(false); // setTimeout(() => {\n          //   navigate('/app/view-employee', { replace: true });\n          // }, 3000);\n        } else {\n          // console.log(res.message);\n          // setSnackValue(res.message);\n          // setSnackStatus('error');\n          // handleClick();\n          setSubmitting(false);\n        } // console.log(res);\n\n      }\n    }, ({\n      errors,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      isSubmitting,\n      setFieldValue,\n      touched,\n      values,\n      resetForm\n    }) => __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(Grid, {\n      container: true,\n      className: \"mobileContainer\",\n      spacing: 3\n    }, __jsx(Grid, {\n      item: true,\n      md: 12,\n      xs: 12\n    }, __jsx(\"div\", {\n      className: classes.profileImage\n    }, __jsx(\"input\", {\n      accept: \"image/*\",\n      className: classes.input,\n      id: \"profile_image\",\n      type: \"file\",\n      onChange: event => {\n        setFieldValue('file', event.currentTarget.files[0]);\n        document.getElementById('output').src = window.URL.createObjectURL(event.currentTarget.files[0]);\n        setImgPreview(window.URL.createObjectURL(event.currentTarget.files[0]));\n      },\n      hidden: true\n    }), __jsx(\"label\", {\n      htmlFor: \"profile_image\"\n    }, __jsx(IconButton, {\n      color: \"primary\",\n      \"aria-label\": \"upload picture\",\n      component: \"span\"\n    }, __jsx(Avatar, {\n      className: classes.large,\n      id: \"output\",\n      src: imgPreview\n    }))))), __jsx(Grid, {\n      item: true,\n      md: 2,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"select\",\n      error: Boolean(touched.title && errors.title),\n      fullWidth: true,\n      helperText: touched.title && errors.title,\n      label: \"Title *\",\n      name: \"title\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.title,\n      variant: \"outlined\",\n      select: true\n    }, __jsx(MenuItem, {\n      value: \"Dr.\"\n    }, \"Dr.\"), __jsx(MenuItem, {\n      value: \"Mr.\"\n    }, \"Mr.\"))), __jsx(Grid, {\n      item: true,\n      md: 5,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.first_name && errors.first_name),\n      fullWidth: true,\n      helperText: touched.first_name && errors.first_name,\n      label: \"First Name *\" // margin=\"normal\"\n      ,\n      name: \"first_name\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.first_name,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true,\n      md: 5,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.last_name && errors.last_name),\n      fullWidth: true,\n      helperText: touched.last_name && errors.last_name,\n      label: \"Last Name *\",\n      name: \"last_name\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.last_name,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(FormGroup, {\n      row: true\n    }, __jsx(FormControlLabel, {\n      control: __jsx(Checkbox, {\n        color: \"primary\"\n      }),\n      label: \"Male\"\n    }), __jsx(FormControlLabel, {\n      control: __jsx(Checkbox, {\n        color: \"primary\"\n      }),\n      label: \"Female\"\n    }), __jsx(FormControlLabel, {\n      control: __jsx(Checkbox, {\n        color: \"primary\"\n      }),\n      label: \"Others\"\n    }))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(MuiPickersUtilsProvider, {\n      utils: DateFnsUtils\n    }, __jsx(KeyboardDatePicker, {\n      disableToolbar: true,\n      error: Boolean(touched.dob && errors.dob),\n      fullWidth: true,\n      helperText: touched.dob && errors.dob,\n      label: \"Date of Birth\",\n      name: \"dob\",\n      format: \"dd/MM/yyyy\",\n      onBlur: handleBlur,\n      onChange: value => setFieldValue('dob', value),\n      value: values.dob,\n      inputVariant: \"outlined\",\n      KeyboardButtonProps: {\n        'aria-label': 'change date'\n      }\n    }))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.age && errors.age),\n      fullWidth: true,\n      helperText: touched.age && errors.age,\n      label: \"Age *\",\n      name: \"age\",\n      type: \"number\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.age,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"blood_group\",\n      error: Boolean(touched.blood_group && errors.blood_group),\n      fullWidth: true,\n      helperText: touched.blood_group && errors.blood_group,\n      label: \"Blood Group *\",\n      name: \"blood_group\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.blood_group,\n      variant: \"outlined\",\n      select: true\n    }, __jsx(MenuItem, {\n      value: \"O negative\"\n    }, \"O negative\"), __jsx(MenuItem, {\n      value: \"O positive\"\n    }, \"O positive\"), __jsx(MenuItem, {\n      value: \"B negative\"\n    }, \"B negative\"))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.height && errors.height),\n      fullWidth: true,\n      helperText: touched.height && errors.height,\n      label: \"Height(Ft) *\" // margin=\"normal\"\n      ,\n      name: \"height\",\n      type: \"number\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.height,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.weight && errors.weight),\n      fullWidth: true,\n      helperText: touched.weight && errors.weight,\n      label: \"Weight(Kg) *\" // margin=\"normal\"\n      ,\n      name: \"weight\",\n      type: \"number\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.weight,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(Divider, null)), __jsx(Grid, {\n      item: true,\n      md: 12,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.address && errors.address),\n      fullWidth: true,\n      helperText: touched.address && errors.address,\n      label: \"Address\" // margin=\"normal\"\n      ,\n      name: \"address\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.address,\n      variant: \"outlined\",\n      multiline: true,\n      rows: 4\n    })), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"state\",\n      error: Boolean(touched.state && errors.state),\n      fullWidth: true,\n      helperText: touched.state && errors.state,\n      label: \"State *\",\n      name: \"state\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.state,\n      variant: \"outlined\",\n      select: true\n    }, __jsx(MenuItem, {\n      value: \"O negative\"\n    }, \"O negative\"), __jsx(MenuItem, {\n      value: \"O positive\"\n    }, \"O positive\"), __jsx(MenuItem, {\n      value: \"B negative\"\n    }, \"B negative\"))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"district\",\n      error: Boolean(touched.district && errors.district),\n      fullWidth: true,\n      helperText: touched.district && errors.district,\n      label: \"District *\",\n      name: \"district\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.district,\n      variant: \"outlined\",\n      select: true\n    }, __jsx(MenuItem, {\n      value: \"O negative\"\n    }, \"O negative\"), __jsx(MenuItem, {\n      value: \"O positive\"\n    }, \"O positive\"), __jsx(MenuItem, {\n      value: \"B negative\"\n    }, \"B negative\"))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"city\",\n      error: Boolean(touched.city && errors.city),\n      fullWidth: true,\n      helperText: touched.city && errors.city,\n      label: \"City *\",\n      name: \"city\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.city,\n      variant: \"outlined\",\n      select: true\n    }, __jsx(MenuItem, {\n      value: \"O negative\"\n    }, \"O negative\"), __jsx(MenuItem, {\n      value: \"O positive\"\n    }, \"O positive\"), __jsx(MenuItem, {\n      value: \"B negative\"\n    }, \"B negative\"))), __jsx(Grid, {\n      item: true,\n      md: 6,\n      xs: 12\n    }, __jsx(TextField, {\n      error: Boolean(touched.pinCode && errors.pinCode),\n      fullWidth: true,\n      helperText: touched.pinCode && errors.pinCode,\n      label: \"pinCode(Kg) *\" // margin=\"normal\"\n      ,\n      name: \"pinCode\",\n      type: \"number\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.pinCode,\n      variant: \"outlined\"\n    })), __jsx(Box, {\n      my: 2,\n      ml: 1.4\n    }, __jsx(Button, {\n      color: \"primary\",\n      disabled: isSubmitting,\n      fullWidth: true,\n      size: \"large\",\n      type: \"submit\",\n      variant: \"contained\"\n    }, \"Save Profile\"), isSubmitting && __jsx(LinearProgress, null))))))), __jsx(TabPanel, {\n      value: value,\n      index: 1\n    }, __jsx(Medical, null)), __jsx(TabPanel, {\n      value: value,\n      index: 2\n    }, \"dsds\"), __jsx(TabPanel, {\n      value: value,\n      index: 3\n    }, \"Item four\")) // </div>\n\n  );\n};\n\nexport default General;","map":null,"metadata":{},"sourceType":"module"}