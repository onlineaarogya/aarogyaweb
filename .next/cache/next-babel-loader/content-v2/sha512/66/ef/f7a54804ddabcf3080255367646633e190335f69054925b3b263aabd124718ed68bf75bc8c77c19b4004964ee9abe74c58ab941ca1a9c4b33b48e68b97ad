{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport CountUp from 'react-countup';\nimport clsx from 'clsx';\nimport { Typography } from '@material-ui/core';\n/**\r\n * Component to display the Count Up Numbers\r\n *\r\n * @param {Object} props\r\n */\n\nconst CountUpNumber = props => {\n  const {\n    start,\n    end,\n    suffix,\n    prefix,\n    label,\n    textColor,\n    labelColor,\n    className,\n    visibilitySensorProps,\n    wrapperProps,\n    countWrapperProps,\n    countNumberProps,\n    labelProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"start\", \"end\", \"suffix\", \"prefix\", \"label\", \"textColor\", \"labelColor\", \"className\", \"visibilitySensorProps\", \"wrapperProps\", \"countWrapperProps\", \"countNumberProps\", \"labelProps\"]);\n\n  const [viewPortEntered, setViewPortEntered] = React.useState(false);\n\n  const setViewPortVisibility = isVisible => {\n    if (viewPortEntered) {\n      return;\n    }\n\n    setViewPortEntered(isVisible);\n  };\n\n  return __jsx(\"div\", _extends({\n    className: clsx('countup-number', className)\n  }, rest), __jsx(VisibilitySensor, _extends({\n    onChange: isVisible => setViewPortVisibility(isVisible),\n    delayedCall: true\n  }, visibilitySensorProps), __jsx(\"div\", _extends({\n    className: \"countup-number__wrapper\"\n  }, wrapperProps), __jsx(Typography, _extends({\n    variant: \"h4\",\n    gutterBottom: true,\n    align: \"center\",\n    color: textColor || 'textPrimary',\n    className: \"countup-number__count-wrapper\"\n  }, countWrapperProps), __jsx(CountUp, _extends({\n    delay: 1,\n    redraw: false,\n    end: viewPortEntered ? end : start,\n    start: start,\n    suffix: suffix || '',\n    prefix: prefix || '',\n    className: \"countup-number__count\"\n  }, countNumberProps))), __jsx(Typography, _extends({\n    variant: \"subtitle1\",\n    color: labelColor || 'textSecondary',\n    align: \"center\",\n    className: \"countup-number__label\"\n  }, labelProps), label))));\n};\n\nCountUpNumber.defaultProps = {\n  start: 0,\n  visibilitySensorProps: {},\n  wrapperProps: {},\n  countWrapperProps: {},\n  countNumberProps: {},\n  labelProps: {}\n};\nexport default CountUpNumber;","map":null,"metadata":{},"sourceType":"module"}