{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Icon } from 'components/atoms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'inline-flex',\n    flexWrap: 'nowrap',\n    alignItems: 'center',\n    width: '100%'\n  },\n  title: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n/**\n * Component to display the icon text\n *\n * @param {Object} props\n */\n\nconst IconText = props => {\n  const {\n    title,\n    color,\n    fontIconClass,\n    className,\n    iconProps,\n    typographyProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"color\", \"fontIconClass\", \"className\", \"iconProps\", \"typographyProps\"]);\n\n  const classes = useStyles();\n  return __jsx(\"div\", _extends({\n    className: clsx('icon-text', classes.root, className)\n  }, rest), __jsx(Icon, _extends({\n    className: \"icon-text__icon\",\n    size: \"small\",\n    fontIconClass: fontIconClass,\n    fontIconColor: color\n  }, iconProps)), __jsx(Typography, _extends({\n    noWrap: true,\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: clsx('icon-text__typography', classes.title)\n  }, typographyProps), title));\n};\n\nIconText.defaultProps = {\n  iconProps: {},\n  typographyProps: {}\n};\nexport default IconText;","map":null,"metadata":{},"sourceType":"module"}