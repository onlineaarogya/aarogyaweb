{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      marginBottom: theme.spacing(4)\n    }\n  },\n  disableGutter: {\n    marginBottom: 0\n  },\n  title: {\n    fontWeight: 'bold'\n  },\n  cta: {\n    marginLeft: theme.spacing(1),\n    '&:first-child': {\n      marginLeft: theme.spacing(0)\n    }\n  }\n}));\n/**\n * Component to display the section headers\n *\n * @param {Object} props\n */\n\nconst SectionHeader = props => {\n  const {\n    title,\n    titleVariant,\n    subtitleVariant,\n    subtitle,\n    subtitleColor,\n    label,\n    overline,\n    fadeUp,\n    align,\n    ctaGroup,\n    disableGutter,\n    titleClasses,\n    className,\n    labelProps,\n    titleProps,\n    subtitleProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"titleVariant\", \"subtitleVariant\", \"subtitle\", \"subtitleColor\", \"label\", \"overline\", \"fadeUp\", \"align\", \"ctaGroup\", \"disableGutter\", \"titleClasses\", \"className\", \"labelProps\", \"titleProps\", \"subtitleProps\"]);\n\n  const classes = useStyles();\n  let justifyGrid = 'center';\n\n  if (align === 'left') {\n    justifyGrid = 'flex-start';\n  } else if (align === 'right') {\n    justifyGrid = 'flex-end';\n  }\n\n  return __jsx(Grid, _extends({\n    container: true,\n    spacing: 2,\n    \"data-aos\": fadeUp ? 'fade-up' : '',\n    className: clsx('section-header', classes.root, disableGutter ? classes.disableGutter : {}, className)\n  }, rest), overline && __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: justifyGrid,\n    xs: 12,\n    className: \"section-header__overline-wrapper\"\n  }, overline), label && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"section-header__label-wrapper\"\n  }, __jsx(Typography, _extends({\n    variant: \"overline\",\n    color: \"primary\",\n    component: \"p\",\n    align: align || 'center'\n  }, labelProps), label)), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"section-header__title-wrapper\"\n  }, __jsx(Typography, _extends({\n    variant: titleVariant,\n    align: align || 'center',\n    className: clsx('section-header__title', classes.title, titleClasses ? titleClasses : {}),\n    color: \"textPrimary\"\n  }, titleProps), title)), subtitle && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"section-header__subtitle-wrapper\"\n  }, __jsx(Typography, _extends({\n    variant: subtitleVariant || 'h6',\n    align: align || 'center',\n    color: subtitleColor || 'textSecondary',\n    className: \"section-header__subtitle\"\n  }, subtitleProps), subtitle)), ctaGroup && ctaGroup.length && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"section-header__cta-wrapper\"\n  }, __jsx(Grid, {\n    container: true,\n    justify: justifyGrid,\n    alignItems: \"center\",\n    wrap: \"nowrap\",\n    className: \"section-header__cta-container\"\n  }, ctaGroup.map((item, index) => __jsx(\"div\", {\n    key: index,\n    className: clsx('section-header__cta-item-wrapper', classes.cta)\n  }, item)))));\n};\n\nSectionHeader.defaultProps = {\n  titleVariant: 'h4',\n  labelProps: {},\n  titleProps: {},\n  subtitleProps: {}\n};\nexport default SectionHeader;","map":null,"metadata":{},"sourceType":"module"}