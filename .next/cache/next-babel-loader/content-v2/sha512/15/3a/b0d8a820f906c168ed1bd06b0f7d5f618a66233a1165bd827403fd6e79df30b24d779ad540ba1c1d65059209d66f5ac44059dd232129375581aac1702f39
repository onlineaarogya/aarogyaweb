{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core';\nimport { CardBase } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%'\n  },\n  dot: {\n    display: 'inline-block',\n    width: theme.spacing(1),\n    height: theme.spacing(1),\n    background: theme.palette.text.primary,\n    borderRadius: '100%',\n    marginRight: theme.spacing(1)\n  },\n  dotBig: {\n    width: theme.spacing(2),\n    height: theme.spacing(2)\n  },\n  dotSmall: {\n    width: theme.spacing(1 / 2),\n    height: theme.spacing(1 / 2)\n  },\n  jobTitle: {\n    fontWeight: 700\n  },\n  dotMargin: {\n    margin: theme.spacing(0, 1)\n  }\n}));\n/**\r\n * Component to display the job card\r\n *\r\n * @param {Object} props\r\n */\n\nconst CardJob = props => {\n  const {\n    badgeColor,\n    badgeTitle,\n    jobTitle,\n    jobLocation,\n    jobType,\n    jobDate,\n    companyLogo,\n    companyName,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"badgeColor\", \"badgeTitle\", \"jobTitle\", \"jobLocation\", \"jobType\", \"jobDate\", \"companyLogo\", \"companyName\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(CardBase, _extends({\n    className: clsx('card-job', classes.root, className),\n    align: \"left\"\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    xs: 12\n  }, __jsx(\"span\", {\n    className: clsx(classes.dot, classes.dotBig),\n    style: {\n      background: badgeColor\n    }\n  }), __jsx(Typography, {\n    component: \"span\",\n    variant: \"body2\",\n    color: \"textPrimary\"\n  }, badgeTitle)), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.jobTitle\n  }, jobTitle))), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    xs: 12\n  }, __jsx(Typography, {\n    component: \"span\",\n    variant: \"subtitle1\",\n    color: \"textSecondary\"\n  }, jobLocation), __jsx(\"span\", {\n    className: clsx(classes.dot, classes.dotSmall, classes.dotMargin)\n  }), __jsx(Typography, {\n    component: \"span\",\n    variant: \"subtitle1\",\n    color: \"textSecondary\"\n  }, jobType))), __jsx(ListItem, {\n    disableGutters: true\n  }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n    src: companyLogo,\n    alt: companyName\n  })), __jsx(ListItemText, {\n    primary: companyName,\n    secondary: jobDate\n  })));\n};\n\nexport default CardJob;","map":null,"metadata":{},"sourceType":"module"}