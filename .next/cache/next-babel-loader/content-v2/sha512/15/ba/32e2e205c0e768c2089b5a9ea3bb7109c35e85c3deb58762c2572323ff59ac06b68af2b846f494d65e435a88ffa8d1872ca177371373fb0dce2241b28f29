{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { parse } from 'query-string';\nimport { Typography, ListItem, makeStyles } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  item: {\n    display: 'flex',\n    textTransform: 'none',\n    width: '100%',\n    color: theme.palette.text.primary,\n    '&:hover': {\n      background: 'transparent',\n      color: theme.palette.primary.main\n    }\n  },\n  itemActive: {\n    color: theme.palette.primary.main,\n    '& span': {\n      fontWeight: 700\n    }\n  }\n}));\n\nconst getComponentId = () => parse(window.location.search).component || 'introduction';\n\nconst NavItem = (_ref) => {\n  let {\n    className,\n    href,\n    icon: Icon,\n    title,\n    id\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"href\", \"icon\", \"title\", \"id\"]);\n\n  const classes = useStyles();\n  return __jsx(ListItem, _extends({\n    className: clsx(classes.item, getComponentId() === id ? classes.itemActive : '', className),\n    component: 'a',\n    href: href\n  }, rest), __jsx(Typography, {\n    variant: \"body2\",\n    component: \"span\"\n  }, title));\n};\n\nexport default NavItem;","map":null,"metadata":{},"sourceType":"module"}