{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, colors } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'relative'\n  },\n  border: {\n    width: theme.spacing(5),\n    height: theme.spacing(2),\n    borderRadius: theme.spacing(3),\n    border: '3px solid',\n    borderColor: theme.palette.divider,\n    backgroundColor: 'transparent',\n    [theme.breakpoints.up('md')]: {\n      width: theme.spacing(6),\n      height: theme.spacing(3)\n    }\n  },\n  borderDark: {\n    borderColor: colors.indigo[700]\n  },\n  modeToggler: {\n    position: 'absolute',\n    top: `-${theme.spacing(1 / 2)}px`,\n    left: `-${theme.spacing(1 / 2)}px`,\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    borderRadius: '50%',\n    backgroundColor: theme.palette.text.primary,\n    transition: `transform .3s cubic-bezier(.4,.03,0,1)`,\n    cursor: 'pointer',\n    [theme.breakpoints.up('md')]: {\n      width: theme.spacing(4),\n      height: theme.spacing(4)\n    }\n  },\n  modeTogglerDark: {\n    transform: `translateX(${theme.spacing(3)}px)`,\n    backgroundColor: colors.indigo[900]\n  },\n  modeTogglerIcon: {\n    fill: theme.palette.secondary.main,\n    marginTop: theme.spacing(1 / 2),\n    marginLeft: theme.spacing(1 / 2),\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(1),\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n/**\r\n * Component to display the dark mode toggler\r\n *\r\n * @param {Object} props\r\n */\n\nconst DarkModeToggler = (_ref) => {\n  let {\n    themeMode = 'light',\n    onClick,\n    className\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"themeMode\", \"onClick\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(\"span\", _extends({\n    className: clsx(classes.root, className)\n  }, rest, {\n    onClick: onClick\n  }), __jsx(\"div\", {\n    className: clsx(classes.border, themeMode === 'dark' ? classes.borderDark : '')\n  }), __jsx(\"div\", {\n    className: clsx(classes.modeToggler, themeMode === 'dark' ? classes.modeTogglerDark : '')\n  }, __jsx(\"svg\", {\n    className: classes.modeTogglerIcon,\n    \"aria-hidden\": \"true\",\n    width: \"14\",\n    height: \"13\",\n    viewBox: \"0 0 14 13\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, __jsx(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M4.52208 7.71754C7.5782 7.71754 10.0557 5.24006 10.0557 2.18394C10.0557 1.93498 10.0392 1.68986 10.0074 1.44961C9.95801 1.07727 10.3495 0.771159 10.6474 0.99992C12.1153 2.12716 13.0615 3.89999 13.0615 5.89383C13.0615 9.29958 10.3006 12.0605 6.89485 12.0605C3.95334 12.0605 1.49286 10.001 0.876728 7.24527C0.794841 6.87902 1.23668 6.65289 1.55321 6.85451C2.41106 7.40095 3.4296 7.71754 4.52208 7.71754Z\"\n  }))));\n};\n\nexport default DarkModeToggler;","map":null,"metadata":{},"sourceType":"module"}