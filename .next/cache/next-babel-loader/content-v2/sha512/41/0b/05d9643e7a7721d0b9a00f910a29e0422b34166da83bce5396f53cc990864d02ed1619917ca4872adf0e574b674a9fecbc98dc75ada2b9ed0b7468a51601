{"ast":null,"code":"var _jsxFileName = \"/Users/praveensingh/Sites/aarogyaApp/src/components/helper/Snackbar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nexport default function customSnackbar(props) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Snackbar, {\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: props.snackStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, props.snackValue)));\n} // customSnackbar.propTypes = {\n//   snackValue: PropTypes.string.isRequired,\n//   // snackbar status type or validation\n//   snackStatus: PropTypes.string.isRequired,\n// };\n\n_s(customSnackbar, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaApp/src/components/helper/Snackbar.js"],"names":["Snackbar","Alert","PropTypes","React","useState","customSnackbar","props","open","setOpen","handleClose","event","reason","vertical","horizontal","snackStatus","snackValue"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxB;;AACA,QAAMK,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AACDH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GALD;;AAMA,SACE,4BACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAED,IADR;AAEE,IAAA,gBAAgB,EAAE,IAFpB;AAGE,IAAA,OAAO,EAAEE,WAHX;AAIE,IAAA,YAAY,EAAE;AAAEG,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,WAAhB;AAA6B,IAAA,QAAQ,EAAEH,KAAK,CAACQ,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,CAACS,UADT,CANF,CADF,CADF;AAcD,C,CACD;AACA;AACA;AACA;AACA;;GA3BwBV,c","sourcesContent":["import { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nexport default function customSnackbar(props) {\n  const [open, setOpen] = React.useState(false);\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  return (\n    <>\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert onClose={handleClose} severity={props.snackStatus}>\n          {props.snackValue}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n// customSnackbar.propTypes = {\n//   snackValue: PropTypes.string.isRequired,\n//   // snackbar status type or validation\n//   snackStatus: PropTypes.string.isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}