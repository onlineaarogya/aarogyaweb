{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  title: {\n    fontWeight: 700\n  }\n}));\n/**\n * Component to display the description list with icon\n *\n * @param {Object} props\n */\n\nconst DescriptionListIcon = props => {\n  const {\n    title,\n    subtitle,\n    icon,\n    align,\n    titleVariant,\n    subtitleVariant,\n    className,\n    titleProps,\n    subtitleProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"subtitle\", \"icon\", \"align\", \"titleVariant\", \"subtitleVariant\", \"className\", \"titleProps\", \"subtitleProps\"]);\n\n  const classes = useStyles();\n  let gridJustify = 'center';\n\n  if (align === 'left') {\n    gridJustify = 'flex-start';\n  } else if (align === 'right') {\n    gridJustify = 'flex-end';\n  }\n\n  return __jsx(Grid, _extends({\n    container: true,\n    spacing: 2\n  }, rest, {\n    className: clsx('description-list-icon', className)\n  }), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: gridJustify,\n    xs: 12,\n    className: \"description-list-icon__icon-wrapper\"\n  }, icon), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"description-list-icon__title-wrapper\"\n  }, __jsx(Typography, _extends({\n    variant: titleVariant,\n    color: \"textPrimary\",\n    align: align,\n    className: clsx(classes.title, 'description-list-icon__title')\n  }, titleProps), title)), subtitle && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: \"description-list-icon__subtitle-wrapper\"\n  }, __jsx(Typography, {\n    variant: subtitleVariant,\n    color: \"textSecondary\",\n    align: align,\n    className: \"description-list-icon__subtitle\"\n  }, subtitle)));\n};\n\nDescriptionListIcon.defaultProps = {\n  align: 'center',\n  titleVariant: 'h6',\n  subtitleVariant: 'body1',\n  titleProps: {},\n  subtitleProps: {}\n};\nexport default DescriptionListIcon;","map":null,"metadata":{},"sourceType":"module"}