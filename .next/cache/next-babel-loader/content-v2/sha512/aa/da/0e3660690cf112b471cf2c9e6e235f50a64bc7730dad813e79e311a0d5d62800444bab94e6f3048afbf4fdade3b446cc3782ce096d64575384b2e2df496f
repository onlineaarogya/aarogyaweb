{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { colors, Grid } from '@material-ui/core';\nimport { Image } from 'components/atoms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'relative'\n  },\n  imageWrapper: {\n    position: 'relative',\n    maxHeight: 400\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover'\n  },\n  cover: {\n    background: colors.indigo[900],\n    opacity: 0.6,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: '100%',\n    height: '100%'\n  },\n  content: {\n    position: 'absolute',\n    padding: theme.spacing(2),\n    top: '50%',\n    transform: 'translateY(-50%)',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      position: 'relative',\n      transform: 'none',\n      padding: theme.spacing(0, 4)\n    }\n  }\n}));\n/**\r\n * Component to display the side image hero\r\n *\r\n * @param {Object} props\r\n */\n\nconst HeroSideImage = props => {\n  const {\n    imageSrc,\n    imageSrcSet,\n    children,\n    backgroundColor,\n    reverse,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"imageSrc\", \"imageSrcSet\", \"children\", \"backgroundColor\", \"reverse\", \"className\"]);\n\n  const classes = useStyles();\n  const useCustomStyles = makeStyles(() => ({\n    coverBg: {\n      background: backgroundColor\n    }\n  }));\n  const customClasses = useCustomStyles();\n  return __jsx(Grid, _extends({\n    container: true,\n    className: clsx('hero-side-image', classes.root, className),\n    direction: reverse ? 'row-reverse' : 'row'\n  }, rest), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    className: clsx('hero-side-image__image-wrapper', classes.imageWrapper)\n  }, __jsx(Image, {\n    src: imageSrc,\n    srcSet: imageSrcSet ? imageSrcSet : '',\n    alt: '...',\n    className: clsx('hero-side-image__image', classes.image),\n    lazy: false\n  }), __jsx(\"div\", {\n    className: clsx('hero-side-image__cover', classes.cover, backgroundColor ? customClasses.coverBg : {})\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    className: clsx('hero-side-image__content', classes.content)\n  }, children));\n};\n\nexport default HeroSideImage;","map":null,"metadata":{},"sourceType":"module"}