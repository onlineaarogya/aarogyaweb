{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography } from '@material-ui/core';\n/**\n * Component to display the description with CTA's\n *\n * @param {Object} props\n */\n\nconst DescriptionCta = props => {\n  const {\n    title,\n    subtitle,\n    primaryCta,\n    secondaryCta,\n    align,\n    className,\n    wrapperProps,\n    titleProps,\n    subtitleProps,\n    buttonGroupProps,\n    primaryButtonWrapperProps,\n    secondaryButtonWrapperProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"subtitle\", \"primaryCta\", \"secondaryCta\", \"align\", \"className\", \"wrapperProps\", \"titleProps\", \"subtitleProps\", \"buttonGroupProps\", \"primaryButtonWrapperProps\", \"secondaryButtonWrapperProps\"]);\n\n  const theme = useTheme();\n  const isSm = useMediaQuery(theme.breakpoints.up('sm'), {\n    defaultMatches: true\n  });\n  let justifyGrid = 'center';\n\n  if (align === 'left') {\n    justifyGrid = isSm ? 'flex-end' : 'flex-start';\n  } else if (align === 'right') {\n    justifyGrid = isSm ? 'flex-start' : 'flex-end';\n  }\n\n  return __jsx(Grid, _extends({\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: clsx('description-cta', className)\n  }, rest), __jsx(Grid, _extends({\n    item: true,\n    className: \"description-cta__wrapper\"\n  }, wrapperProps), __jsx(Typography, _extends({\n    variant: \"h5\",\n    align: align,\n    gutterBottom: true,\n    className: \"description-cta__title\"\n  }, titleProps), title), subtitle && __jsx(Typography, _extends({\n    variant: \"subtitle1\",\n    align: align,\n    color: \"textSecondary\",\n    className: \"description-cta__subtitle\"\n  }, subtitleProps), subtitle)), __jsx(Grid, {\n    item: true\n  }, __jsx(Grid, _extends({\n    container: true,\n    justify: justifyGrid,\n    spacing: 1,\n    className: \"description-cta__button-group\"\n  }, buttonGroupProps), __jsx(Grid, _extends({\n    item: true,\n    className: \"description-cta__primary-button-wrapper\"\n  }, primaryButtonWrapperProps), primaryCta), secondaryCta && __jsx(Grid, _extends({\n    item: true,\n    className: clsx('description-cta__secondary-button-wrapper')\n  }, secondaryButtonWrapperProps), secondaryCta))));\n};\n\nDescriptionCta.defaultProps = {\n  align: 'center',\n  wrapperProps: {},\n  titleProps: {},\n  subtitleProps: {},\n  buttonGroupProps: {},\n  primaryButtonWrapperProps: {},\n  secondaryButtonWrapperProps: {}\n};\nexport default DescriptionCta;","map":null,"metadata":{},"sourceType":"module"}