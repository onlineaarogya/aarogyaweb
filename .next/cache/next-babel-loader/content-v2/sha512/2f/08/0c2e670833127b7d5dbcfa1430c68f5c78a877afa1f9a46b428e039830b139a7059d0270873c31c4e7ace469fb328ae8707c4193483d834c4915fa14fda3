{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport Link from 'next/link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Toolbar, Hidden, List, ListItem, ListItemIcon, Popover, Typography, IconButton, Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Image, DarkModeToggler } from 'components/atoms';\nconst useStyles = makeStyles(theme => ({\n  flexGrow: {\n    flexGrow: 1\n  },\n  navigationContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  toolbar: {\n    zIndex: 999,\n    maxWidth: theme.layout.contentWidth,\n    width: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(0, 2),\n    [theme.breakpoints.up('sm')]: {\n      padding: theme.spacing(0, 8)\n    }\n  },\n  navLink: {\n    '&:hover': {\n      color: theme.palette.primary.dark\n    }\n  },\n  listItem: {\n    cursor: 'pointer',\n    '&:hover > .menu-item, &:hover svg': {\n      color: theme.palette.primary.dark\n    },\n    '&.menu-item--no-dropdown': {\n      paddingRight: 0\n    }\n  },\n  listItemActive: {\n    '&> .menu-item': {\n      color: theme.palette.primary.dark\n    }\n  },\n  listItemText: {\n    flex: '0 0 auto',\n    marginRight: theme.spacing(2),\n    whiteSpace: 'nowrap',\n    fontWeight: 600\n  },\n  listItemButton: {\n    whiteSpace: 'nowrap'\n  },\n  listItemIcon: {\n    minWidth: 'auto'\n  },\n  popover: {\n    padding: theme.spacing(4),\n    border: theme.spacing(2),\n    boxShadow: '0 0.5rem 2rem 2px rgba(116, 123, 144, 0.09)',\n    minWidth: 200,\n    marginTop: theme.spacing(2)\n  },\n  iconButton: {\n    marginLeft: theme.spacing(2),\n    padding: 0,\n    '&:hover': {\n      background: 'transparent'\n    }\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n    color: theme.palette.primary.dark\n  },\n  logoContainer: {\n    width: 100,\n    height: 28,\n    [theme.breakpoints.up('md')]: {\n      width: 120,\n      height: 32\n    }\n  },\n  logoImage: {\n    position: 'relative',\n    height: 'auto',\n    top: '-17px',\n    width: '130px'\n  },\n  menu: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  menuItem: {\n    marginRight: theme.spacing(5),\n    '&:last-child': {\n      marginRight: 0\n    }\n  },\n  menuGroupItem: {\n    paddingTop: 0\n  },\n  menuGroupTitle: {\n    textTransform: 'uppercase'\n  },\n  pointer: {\n    cursor: 'pointer'\n  }\n}));\n\nconst Topbar = (_ref) => {\n  let {\n    themeMode,\n    themeToggler,\n    onSidebarOpen,\n    pages,\n    className\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"themeMode\", \"themeToggler\", \"onSidebarOpen\", \"pages\", \"className\"]);\n\n  const classes = useStyles();\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: openedPopoverId,\n    1: setOpenedPopoverId\n  } = useState(null);\n\n  const handleClick = (event, popoverId) => {\n    setAnchorEl(event.target);\n    setOpenedPopoverId(popoverId);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setOpenedPopoverId(null);\n  };\n\n  const landings = pages.landings;\n  const supportedPages = pages.pages;\n  const account = pages.account;\n\n  const MenuGroup = props => {\n    const {\n      item\n    } = props;\n    return __jsx(List, {\n      disablePadding: true\n    }, item.pages.map((page, i) => __jsx(ListItem, {\n      disableGutters: true,\n      key: i,\n      className: classes.menuGroupItem\n    }, __jsx(Link, {\n      href: page.href\n    }, __jsx(Typography, {\n      variant: \"body1\",\n      component: \"a\",\n      href: page.href,\n      className: clsx(classes.navLink, 'submenu-item', classes.pointer),\n      color: \"textSecondary\",\n      onClick: handleClose\n    }, page.title)))));\n  };\n\n  const LandingPages = () => {\n    const {\n      services,\n      apps,\n      web,\n      career\n    } = landings.children;\n    return __jsx(\"div\", {\n      className: classes.menu\n    }, __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: web\n    })));\n  };\n\n  const SupportedPages = () => {\n    const {\n      career,\n      helpCenter,\n      company,\n      contact,\n      blog,\n      portfolio\n    } = supportedPages.children;\n    return __jsx(\"div\", {\n      className: classes.menu\n    }, __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: career\n    }), __jsx(MenuGroup, {\n      item: helpCenter\n    })), __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: company\n    }), __jsx(MenuGroup, {\n      item: contact\n    })), __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: blog\n    }), __jsx(MenuGroup, {\n      item: portfolio\n    })));\n  };\n\n  const AccountPages = () => {\n    const {\n      settings,\n      signup,\n      signin,\n      password,\n      error\n    } = account.children;\n    return __jsx(\"div\", {\n      className: classes.menu\n    }, __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: settings\n    })), __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: signup\n    }), __jsx(MenuGroup, {\n      item: signin\n    })), __jsx(\"div\", {\n      className: classes.menuItem\n    }, __jsx(MenuGroup, {\n      item: password\n    }), __jsx(MenuGroup, {\n      item: error\n    })));\n  };\n\n  const renderPages = id => {\n    if (id === 'landing-pages') {\n      return __jsx(LandingPages, null);\n    }\n\n    if (id === 'supported-pages') {\n      return __jsx(SupportedPages, null);\n    }\n\n    if (id === 'account') {\n      return __jsx(AccountPages, null);\n    }\n  };\n\n  return __jsx(Toolbar, _extends({\n    disableGutters: true,\n    className: classes.toolbar\n  }, rest), __jsx(\"div\", {\n    className: classes.logoContainer\n  }, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    title: \"OnlineAarogya\"\n  }, __jsx(Image, {\n    className: classes.logoImage,\n    src: themeMode === 'light' ? process.env.NEXT_PUBLIC_BASE_URL + '/assets/logo-blue.png' : process.env.NEXT_PUBLIC_BASE_URL + '/assets/logo-white.png',\n    alt: \"thefront\",\n    lazy: false\n  })))), __jsx(\"div\", {\n    className: classes.flexGrow\n  }), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(List, {\n    disablePadding: true,\n    className: classes.navigationContainer\n  }, __jsx(Link, {\n    href: \"/\",\n    color: \"textPrimary\",\n    variant: \"body1\",\n    className: clsx(classes.listItemText, 'menu-item')\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    className: clsx(classes.listItemText, 'menu-item', classes.pointer)\n  }, \"Home\")), __jsx(Link, {\n    href: `${process.env.NEXT_PUBLIC_BASE_URL}/about-us`,\n    color: \"textPrimary\",\n    variant: \"body1\",\n    className: clsx(classes.listItemText, 'menu-item')\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    className: clsx(classes.listItemText, 'menu-item', classes.pointer, classes.navLink)\n  }, \"About Us\")), __jsx(Link, {\n    href: `${process.env.NEXT_PUBLIC_BASE_URL}/career`,\n    color: \"textPrimary\",\n    variant: \"body1\",\n    className: clsx(classes.listItemText, 'menu-item')\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    className: clsx(classes.listItemText, 'menu-item', classes.pointer, classes.navLink)\n  }, \"Career\")), __jsx(Link, {\n    href: `${process.env.NEXT_PUBLIC_BASE_URL}/contact-us`,\n    color: \"textPrimary\",\n    variant: \"body1\",\n    className: clsx(classes.listItemText, 'menu-item')\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    component: \"a\",\n    className: clsx(classes.listItemText, 'menu-item', classes.pointer, classes.navLink)\n  }, \"Contact Us\")), [landings].map((page, i) => __jsx(\"div\", {\n    key: page.id\n  }, __jsx(ListItem, {\n    \"aria-describedby\": page.id,\n    onClick: e => handleClick(e, page.id),\n    className: clsx(classes.listItem, openedPopoverId === page.id ? classes.listItemActive : '')\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    className: clsx(classes.listItemText, 'menu-item')\n  }, page.title), __jsx(ListItemIcon, {\n    className: classes.listItemIcon\n  }, __jsx(ExpandMoreIcon, {\n    className: openedPopoverId === page.id ? classes.expandOpen : '',\n    fontSize: \"small\"\n  }))), __jsx(Popover, {\n    elevation: 1,\n    id: page.id,\n    open: openedPopoverId === page.id,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    classes: {\n      paper: classes.popover\n    }\n  }, __jsx(\"div\", null, renderPages(page.id))))), __jsx(ListItem, {\n    className: clsx(classes.listItem, 'menu-item--no-dropdown')\n  }, __jsx(DarkModeToggler, {\n    themeMode: themeMode,\n    onClick: () => themeToggler()\n  })), __jsx(ListItem, {\n    style: {\n      width: '130px'\n    },\n    className: clsx(classes.listItem, 'menu-item--no-dropdown')\n  }, __jsx(\"a\", null, __jsx(Button, {\n    style: {\n      width: '119px',\n      padding: '0px 2px'\n    },\n    variant: \"outlined\",\n    color: \"primary\"\n  }, \"Doctor login\"))), __jsx(ListItem, {\n    style: {\n      width: '130px'\n    },\n    className: clsx(classes.listItem, 'menu-item--no-dropdown')\n  }, __jsx(Link, {\n    href: `${process.env.NEXT_PUBLIC_BASE_URL}/signin`\n  }, __jsx(\"a\", null, __jsx(Button, {\n    style: {\n      width: '119px',\n      padding: '0px 2px'\n    },\n    variant: \"outlined\",\n    color: \"primary\"\n  }, \"Patient login\")))))), __jsx(Hidden, {\n    mdUp: true\n  }, __jsx(DarkModeToggler, {\n    themeMode: themeMode,\n    onClick: () => themeToggler()\n  }), __jsx(IconButton, {\n    className: classes.iconButton,\n    onClick: onSidebarOpen,\n    \"aria-label\": \"Menu\"\n  }, __jsx(MenuIcon, null))));\n};\n\nexport default Topbar;","map":null,"metadata":{},"sourceType":"module"}