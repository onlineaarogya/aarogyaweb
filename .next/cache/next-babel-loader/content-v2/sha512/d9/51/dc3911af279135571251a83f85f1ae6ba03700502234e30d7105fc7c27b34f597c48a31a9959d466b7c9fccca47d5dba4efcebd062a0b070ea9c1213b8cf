{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { Typography, Paper, TextField, Link, Fab, Grid, Button, CssBaseline, RadioGroup, FormLabel, MenuItem, FormGroup, FormControl, FormControlLabel, Box } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nconst validationSchema = yup.object({\n  first_name: yup.string('Enter your First Name').required('First Name is required'),\n  last_name: yup.string('Enter your Last Name').required('Last Name is required'),\n  email: yup.string('Enter your email').email('Enter a valid email').required('Email is required'),\n  mobile: yup.string('Enter your password').min(10, 'Phone Number should be 10 characters length').required('Mobile is required'),\n  relationship: yup.string('Select Relationship').required('Relationship is required'),\n  martial_status: yup.string('Select Martial Status').required('Martial Status is required'),\n  date: yup.string('Select Date').required('Date is required'),\n  age: yup.string('Enter Age').required('Age is required'),\n  address: yup.string('Enter Address').required('Address is required'),\n  state: yup.string('State is required').required('Select State'),\n  city: yup.string('Select City').required('City is required'),\n  pincode: yup.string('Enter Pincode').required('Pincode is required')\n});\n\nconst UpdateProfile = () => {\n  const formik = useFormik({\n    initialValues: {\n      first_name: '',\n      last_name: '',\n      email: '',\n      mobile: '',\n      relationship: '',\n      martial_status: '',\n      age: '',\n      address: '',\n      state: '',\n      city: '',\n      pincode: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return __jsx(\"div\", {\n    style: {\n      padding: 30\n    }\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Paper, {\n    elevation: 3,\n    style: {\n      padding: 30,\n      width: \"920px\"\n    }\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"flex-start\",\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"first_name\",\n    name: \"first_name\",\n    label: \"First Name\",\n    value: formik.values.first_name,\n    onChange: formik.handleChange,\n    error: formik.touched.first_name && Boolean(formik.errors.first_name),\n    helperText: formik.touched.first_name && formik.errors.first_name\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"last_name\",\n    name: \"last_name\",\n    label: \"Last Name\",\n    value: formik.values.last_name,\n    onChange: formik.handleChange,\n    error: formik.touched.last_name && Boolean(formik.errors.last_name),\n    helperText: formik.touched.last_name && formik.errors.last_name\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    value: formik.values.email,\n    onChange: formik.handleChange,\n    error: formik.touched.email && Boolean(formik.errors.email),\n    helperText: formik.touched.email && formik.errors.email\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"mobile\",\n    name: \"mobile\",\n    label: \"Mobile Number\",\n    value: formik.values.mobile,\n    onChange: formik.handleChange,\n    error: formik.touched.mobile && Boolean(formik.errors.mobile),\n    helperText: formik.touched.mobile && formik.errors.mobile\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 3\n  }, __jsx(TextField, {\n    id: \"relationship\",\n    name: \"relationship\",\n    select: true,\n    label: \"Relationship\",\n    variant: \"outlined\",\n    value: formik.values.relationship,\n    onChange: formik.handleChange,\n    error: formik.touched.relationship && Boolean(formik.errors.relationship),\n    helperText: formik.touched.relationship && formik.errors.relationship,\n    fullWidth: true\n  }, __jsx(MenuItem, {\n    value: \"\"\n  }, __jsx(\"em\", null, \"None\")), __jsx(MenuItem, null, \"Male\"), __jsx(MenuItem, null, \"Female\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 3\n  }, __jsx(TextField, {\n    id: \"martial_status\",\n    name: \"martial_status\",\n    select: true,\n    label: \"Martial Status\",\n    variant: \"outlined\",\n    value: formik.values.martial_status,\n    onChange: formik.handleChange,\n    error: formik.touched.martial_status && Boolean(formik.errors.martial_status),\n    helperText: formik.touched.martial_status && formik.errors.martial_status,\n    fullWidth: true\n  }, __jsx(MenuItem, {\n    value: \"\"\n  }, __jsx(\"em\", null, \"None\")), __jsx(MenuItem, null, \"Married\"), __jsx(MenuItem, null, \"Unmarried\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 3\n  }, __jsx(Box, null, __jsx(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils\n  }, __jsx(KeyboardDatePicker, {\n    id: \"date-picker-dialog\",\n    label: \"Date picker dialog\",\n    inputVariant: \"outlined\",\n    format: \"MM/dd/yyyy\",\n    KeyboardButtonProps: {\n      \"aria-label\": \"change date\"\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 3\n  }, __jsx(Box, null, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"age\",\n    name: \"age\",\n    label: \"Age\",\n    value: formik.values.age,\n    onChange: formik.handleChange,\n    error: formik.touched.age && Boolean(formik.errors.age),\n    helperText: formik.touched.age && formik.errors.age\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, null, \" \", __jsx(TextField, {\n    variant: \"outlined\",\n    rows: 10,\n    id: \"address\",\n    name: \"address\",\n    value: formik.values.address,\n    onChange: formik.handleChange,\n    error: formik.touched.address && Boolean(formik.errors.age),\n    helperText: formik.touched.address && formik.errors.address,\n    fullWidth: true,\n    multiline: true,\n    label: \"Address\"\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6\n  }, __jsx(Box, null, __jsx(TextField, {\n    id: \"state\",\n    select: true,\n    label: \"State\",\n    variant: \"outlined\",\n    value: formik.values.state,\n    onChange: formik.handleChange,\n    error: formik.touched.state && Boolean(formik.errors.state),\n    helperText: formik.touched.state && formik.errors.state,\n    fullWidth: true,\n    multiline: true,\n    label: \"State\",\n    fullWidth: true\n  }, __jsx(MenuItem, {\n    value: \"\"\n  }, __jsx(\"em\", null, \"None\")), __jsx(MenuItem, null, \"Male\"), __jsx(MenuItem, null, \"Female\")), __jsx(TextField, {\n    id: \"city\",\n    margin: \"normal\",\n    select: true,\n    label: \"City\",\n    variant: \"outlined\",\n    value: formik.values.city,\n    onChange: formik.handleChange,\n    error: formik.touched.city && Boolean(formik.errors.city),\n    helperText: formik.touched.city && formik.errors.city,\n    fullWidth: true,\n    multiline: true,\n    label: \"State\",\n    fullWidth: true\n  }, __jsx(MenuItem, {\n    value: \"\"\n  }, __jsx(\"em\", null, \"None\")), __jsx(MenuItem, null, \"Male\"), __jsx(MenuItem, null, \"Female\"))), __jsx(TextField, {\n    fullWidth: true,\n    margin: \"normal\",\n    variant: \"outlined\",\n    id: \"mobile\",\n    name: \"mobile\",\n    label: \"Zip/Postal Code\",\n    value: formik.values.mobile,\n    onChange: formik.handleChange,\n    error: formik.touched.mobile && Boolean(formik.errors.mobile),\n    helperText: formik.touched.mobile && formik.errors.mobile\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    fullWidth: true,\n    type: \"submit\"\n  }, \"Submit\")))))));\n};\n\nexport default UpdateProfile;","map":null,"metadata":{},"sourceType":"module"}