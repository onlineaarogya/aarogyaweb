{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: theme.palette.alternate.main\n  },\n  inner: {\n    maxWidth: theme.layout.contentWidth,\n    width: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(6, 2),\n    [theme.breakpoints.up('sm')]: {\n      padding: theme.spacing(8, 8)\n    },\n    [theme.breakpoints.up('md')]: {\n      padding: theme.spacing(12, 8)\n    }\n  },\n  innerNarrowed: {\n    maxWidth: 800\n  }\n}));\n/**\r\n * Component to display the alternative sections\r\n *\r\n * @param {Object} props\r\n */\n\nconst SectionAlternate = props => {\n  const {\n    children,\n    innerNarrowed,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"children\", \"innerNarrowed\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(\"section\", _extends({\n    className: clsx('section-alternate', classes.root, className)\n  }, rest), __jsx(\"div\", {\n    className: clsx('section-alternate__content', classes.inner, innerNarrowed ? classes.innerNarrowed : {})\n  }, children));\n};\n\nexport default SectionAlternate;","map":null,"metadata":{},"sourceType":"module"}