{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid, Button, TextField } from '@material-ui/core';\nimport validate, { async } from 'validate.js';\nimport { LearnMoreLink } from 'components/atoms';\nimport Link from 'next/link';\nimport { getPatientLogin } from '../../../../components/helper/PatientApi';\nimport AlertMassage from '../../../../components/helper/AlertMessage';\nimport Router from 'next/router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  }\n}));\nconst schema = {\n  mobile: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 10,\n      message: \"must be 10 digit\"\n    }\n  } // password: {\n  //   presence: { allowEmpty: false, message: 'is required' },\n  //   length: {\n  //     minimum: 8,\n  //   },\n  // },\n\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const [subming, setSubiting] = React.useState(false);\n  const [status, setStatusBase] = React.useState('');\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === 'checkbox' ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      var data = JSON.stringify({\n        \"mobile\": formState.values.mobile\n      });\n      const res = await getPatientLogin(data);\n\n      if (res.success) {\n        setStatusBase('');\n        setStatusBase({\n          key: 22,\n          status: 'success',\n          msg: 'Check your mobile for the OTP'\n        });\n        Router.push('/signup', undefined, {\n          shallow: true\n        });\n      } else {\n        setStatusBase('');\n        setStatusBase({\n          key: 22,\n          status: 'error',\n          msg: res.message\n        });\n      }\n\n      console.log('res', res);\n      setSubiting(false);\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, status ? __jsx(AlertMassage, {\n    key: status.key,\n    message: status.msg,\n    status: status.status\n  }) : null, __jsx(\"form\", {\n    name: \"password-reset-form\",\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    placeholder: \"Mobile\",\n    label: \"Mobile *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"mobile\",\n    fullWidth: true,\n    helperText: hasError('mobile') ? formState.errors.mobile[0] : null,\n    error: hasError('mobile'),\n    onChange: handleChange,\n    type: \"number\",\n    value: formState.values.mobile || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(\"i\", null, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, \"Fields that are marked with * sign are required.\"))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    size: \"large\",\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    fullWidth: true\n  }, \"Sign in\")), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, \"Forgot your password?\", ' ', __jsx(Link, {\n    href: \"/password-reset\"\n  }, __jsx(\"a\", null, __jsx(LearnMoreLink, {\n    title: \"Reset password\" // href=\"/password-reset-cover\"\n\n  }))))))));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}