{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Image } from 'components/atoms';\nconst useStyles = makeStyles(theme => ({\n  imageGrid: {\n    padding: '.25rem',\n    width: '150%',\n    boxShadow: '0 1.5rem 4rem rgba(22,28,45,.1)',\n    background: theme.palette.background.paper,\n    '& img': {\n      maxWidth: '100%',\n      height: 'auto',\n      verticalAlign: 'middle',\n      borderStyle: 'none'\n    }\n  },\n  imageGridFirstItem: {\n    marginTop: '4rem'\n  },\n  imageGridLastItem: {\n    marginTop: '6rem',\n    float: 'right'\n  }\n}));\n/**\r\n * Component to display the overlaped images\r\n *\r\n * @param {Object} props\r\n */\n\nconst OverlapedImages = props => {\n  const {\n    image1,\n    image2,\n    image3,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"image1\", \"image2\", \"image3\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(Grid, _extends({\n    container: true,\n    className: clsx('overlaped-images', className)\n  }, rest), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    className: \"overlaped-images__item-container\"\n  }, __jsx(\"div\", {\n    className: clsx('overlaped-images__item-wrapper', classes.imageGrid, classes.imageGridFirstItem)\n  }, __jsx(Image, {\n    src: image1.src,\n    srcSet: image1.srcset,\n    alt: image1.alt,\n    className: \"overlaped-images__item-image\"\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    className: \"overlaped-images__item-container\"\n  }, __jsx(\"div\", {\n    className: clsx('overlaped-images__item-wrapper', classes.imageGrid)\n  }, __jsx(Image, {\n    src: image2.src,\n    srcSet: image2.srcset,\n    alt: image2.alt,\n    className: \"overlaped-images__item-image\"\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    className: \"overlaped-images__item-container\"\n  }, __jsx(\"div\", {\n    className: clsx('overlaped-images__item-wrapper', classes.imageGrid, classes.imageGridLastItem)\n  }, __jsx(Image, {\n    src: image3.src,\n    srcSet: image3.srcset,\n    alt: image3.alt,\n    className: \"overlaped-images__item-image\"\n  }))));\n};\n\nexport default OverlapedImages;","map":null,"metadata":{},"sourceType":"module"}