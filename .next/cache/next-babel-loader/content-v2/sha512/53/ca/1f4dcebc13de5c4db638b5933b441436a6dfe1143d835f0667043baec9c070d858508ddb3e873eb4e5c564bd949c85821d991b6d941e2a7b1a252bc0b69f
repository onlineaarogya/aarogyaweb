{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport getTheme from 'theme';\nimport AOS from 'aos';\nexport const useDarkMode = () => {\n  const {\n    0: themeMode,\n    1: setTheme\n  } = useState('light');\n  const {\n    0: mountedComponent,\n    1: setMountedComponent\n  } = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('themeMode', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    themeMode === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('themeMode');\n    localTheme ? setTheme(localTheme) : setMode('light');\n    setMountedComponent(true);\n    AOS.refresh();\n  }, []);\n  useEffect(() => {\n    AOS.refresh();\n  }, [themeMode]);\n  return [themeMode, themeToggler, mountedComponent];\n};\nexport default function WithLayout(_ref) {\n  let {\n    component: Component,\n    layout: Layout\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"layout\"]);\n\n  // console.log('width', rest.data.data);\n  React.useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n\n    AOS.init({\n      once: true,\n      delay: 50,\n      duration: 500,\n      easing: 'ease-in-out'\n    });\n  }, []);\n  const [themeMode, themeToggler, mountedComponent] = useDarkMode();\n  useEffect(() => {\n    AOS.refresh();\n  }, [mountedComponent]);\n  return __jsx(ThemeProvider, {\n    theme: getTheme(themeMode)\n  }, __jsx(CssBaseline, null), __jsx(Paper, {\n    elevation: 0\n  }, __jsx(Layout, {\n    themeMode: themeMode,\n    themeToggler: themeToggler\n  }, __jsx(Component, _extends({\n    data: rest.data,\n    themeMode: themeMode\n  }, rest)))));\n}","map":null,"metadata":{},"sourceType":"module"}