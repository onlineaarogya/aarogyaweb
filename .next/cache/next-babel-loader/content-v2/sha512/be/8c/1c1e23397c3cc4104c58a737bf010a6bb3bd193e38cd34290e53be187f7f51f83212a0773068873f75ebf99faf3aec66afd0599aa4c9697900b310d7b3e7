{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%'\n  },\n  withShadow: {\n    boxShadow: `0 2px 10px 0 ${theme.palette.cardShadow}`\n  },\n  noShadow: {\n    boxShadow: 'none'\n  },\n  noBorder: {\n    border: 0\n  },\n  noBg: {\n    background: 'transparent'\n  },\n  liftUp: {\n    transition: 'box-shadow .25s ease,transform .25s ease,-webkit-transform .25s ease',\n    '&:hover': {\n      boxShadow: '0 1.5rem 2.5rem rgba(22,28,45,.1),0 .3rem 0.5rem -.50rem rgba(22,28,45,.05) !important',\n      transform: 'translate3d(0,-5px,0)'\n    }\n  },\n  content: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(4, 2),\n    '&:last-child': {\n      padding: theme.spacing(4, 2)\n    },\n    [theme.breakpoints.up('md')]: {\n      padding: theme.spacing(6, 3),\n      '&:last-child': {\n        padding: theme.spacing(6, 3)\n      }\n    }\n  },\n  left: {\n    alignItems: 'flex-start'\n  },\n  right: {\n    alignItems: 'flex-end'\n  },\n  center: {\n    alignItems: 'center'\n  }\n}));\n/**\r\n * Component to display the basic card\r\n *\r\n * @param {Object} props\r\n */\n\nconst CardBase = props => {\n  const {\n    withShadow,\n    noShadow,\n    noBorder,\n    noBg,\n    liftUp,\n    children,\n    align,\n    className,\n    cardContentProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"withShadow\", \"noShadow\", \"noBorder\", \"noBg\", \"liftUp\", \"children\", \"align\", \"className\", \"cardContentProps\"]);\n\n  const classes = useStyles();\n  return __jsx(Card, _extends({\n    className: clsx('card-base', classes.root, withShadow ? classes.withShadow : {}, noShadow ? classes.noShadow : {}, noBorder ? classes.noBorder : {}, noBg ? classes.noBg : {}, liftUp ? classes.liftUp : {}, className)\n  }, rest), __jsx(CardContent, _extends({\n    className: clsx('card-base__content', classes.content, classes[align])\n  }, cardContentProps), children));\n};\n\nCardBase.defaultProps = {\n  align: 'center',\n  cardContentProps: {}\n};\nexport default CardBase;","map":null,"metadata":{},"sourceType":"module"}