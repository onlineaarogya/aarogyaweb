{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, colors, IconButton } from '@material-ui/core';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport { IconAlternate } from 'components/molecules';\nimport { CardBase } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%'\n  },\n  fontWeight700: {\n    fontWeight: 700\n  },\n  categoryIconButton: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'flex-end'\n  }\n}));\n/**\n * Component to display the category link card\n *\n * @param {Object} props\n */\n\nconst CardCategoryLink = props => {\n  const {\n    fontIconClass,\n    color,\n    title,\n    subtitle,\n    href,\n    align,\n    className,\n    iconAlternateProps,\n    titleProps,\n    subtitleProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"fontIconClass\", \"color\", \"title\", \"subtitle\", \"href\", \"align\", \"className\", \"iconAlternateProps\", \"titleProps\", \"subtitleProps\"]);\n\n  const classes = useStyles();\n  let justifyGrid = 'flex-start';\n\n  if (align === 'center') {\n    justifyGrid = 'center';\n  } else if (align === 'right') {\n    justifyGrid = 'flex-end';\n  }\n\n  return __jsx(CardBase, _extends({\n    className: clsx('card-category-link', classes.root, className)\n  }, rest), __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    className: \"card-category-link__wrapper\"\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: justifyGrid,\n    xs: 12\n  }, __jsx(IconAlternate, _extends({\n    fontIconClass: fontIconClass,\n    color: color,\n    size: \"medium\"\n  }, iconAlternateProps))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, _extends({\n    variant: \"h6\",\n    align: align,\n    className: classes.fontWeight700\n  }, titleProps), title)), subtitle && __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, _extends({\n    variant: \"subtitle1\",\n    align: align,\n    color: \"textSecondary\"\n  }, subtitleProps), subtitle))), __jsx(\"a\", {\n    href: href,\n    className: clsx('card-category-link__item', classes.categoryIconButton)\n  }, __jsx(IconButton, {\n    className: \"card-category-link__icon-button\"\n  }, __jsx(ArrowRightAltIcon, {\n    className: \"card-category-link__icon\",\n    style: {\n      color: color[500]\n    }\n  })))));\n};\n\nCardCategoryLink.defaultProps = {\n  align: 'left',\n  href: '#',\n  iconAlternateProps: {},\n  titleProps: {},\n  subtitleProps: {}\n};\nexport default CardCategoryLink;","map":null,"metadata":{},"sourceType":"module"}