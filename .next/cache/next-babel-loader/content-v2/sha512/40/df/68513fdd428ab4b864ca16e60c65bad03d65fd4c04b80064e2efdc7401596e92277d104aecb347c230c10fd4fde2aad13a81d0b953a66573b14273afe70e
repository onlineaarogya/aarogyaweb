{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography, Button } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport { Icon } from 'components/atoms';\nimport { SectionHeader } from 'components/molecules';\nimport { Section, CardPricingStandard } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  pagePaddingTop: {\n    paddingTop: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5)\n    }\n  },\n  sectionContainer: {\n    backgroundColor: theme.palette.primary.dark,\n    paddingBottom: theme.spacing(20),\n    borderRadius: '0 0 100% 0'\n  },\n  textWhite: {\n    color: 'white'\n  },\n  fontWeightBold: {\n    fontWeight: 'bold'\n  },\n  toggleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: theme.spacing(0, 2)\n  },\n  toggleButtonGroup: {\n    background: 'transparent'\n  },\n  toggleButton: {\n    background: 'transparent',\n    border: '1px solid white',\n    padding: theme.spacing(1, 5)\n  },\n  toggleButtonActive: {\n    backgroundColor: 'white !important'\n  },\n  toggleTitle: {\n    textTransform: 'capitalize'\n  },\n  toggleTitleActive: {\n    color: theme.palette.primary.main\n  },\n  pricingContainer: {\n    position: 'relative',\n    marginTop: theme.spacing(-20)\n  },\n  sectionNoPaddingTop: {\n    paddingTop: 0\n  },\n  cardPricing: {\n    '& .countup-number__count-wrapper': {\n      textAlign: 'left',\n      marginBottom: 0,\n      fontWeight: 'bold'\n    }\n  }\n}));\n\nconst Main = props => {\n  const {\n    data,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"data\", \"className\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  const [pricingOption, setPricingOption] = React.useState('annual');\n\n  const handleClick = (event, newPricingOption) => {\n    setPricingOption(newPricingOption);\n  };\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(\"div\", {\n    className: classes.sectionContainer\n  }, __jsx(Section, {\n    narrow: true,\n    className: classes.pagePaddingTop\n  }, __jsx(React.Fragment, null, __jsx(SectionHeader, {\n    title: \"Pricing\",\n    subtitle: \"We are founded by a leading academic and researcher in the field of Industrial Systems Engineering. \",\n    titleProps: {\n      className: clsx(classes.textWhite, classes.fontWeightBold),\n      variant: 'h2'\n    },\n    subtitleProps: {\n      className: classes.textWhite\n    },\n    \"data-aos\": \"fade-up\"\n  }), __jsx(\"div\", {\n    className: classes.toggleContainer,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(ToggleButtonGroup, {\n    value: pricingOption,\n    exclusive: true,\n    onChange: handleClick,\n    className: classes.toggleButtonGroup\n  }, __jsx(ToggleButton, {\n    value: \"annual\",\n    className: clsx(classes.toggleButton, pricingOption === 'annual' ? classes.toggleButtonActive : {})\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    className: clsx(classes.fontWeightBold, classes.textWhite, classes.toggleTitle, pricingOption === 'annual' ? classes.toggleTitleActive : {})\n  }, \"Annual\")), __jsx(ToggleButton, {\n    value: \"monthly\",\n    className: clsx(classes.toggleButton, pricingOption === 'monthly' ? classes.toggleButtonActive : {})\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    className: clsx(classes.fontWeightBold, classes.textWhite, classes.toggleTitle, pricingOption === 'monthly' ? classes.toggleTitleActive : {})\n  }, \"Monthly\"))))))), __jsx(\"div\", {\n    className: classes.pricingContainer\n  }, __jsx(\"div\", null, __jsx(Section, {\n    className: classes.sectionNoPaddingTop\n  }, __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2\n  }, data.map((item, index) => __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    \"data-aos\": \"fade-up\",\n    key: index\n  }, __jsx(CardPricingStandard, {\n    variant: \"outlined\",\n    withShadow: item.isHighlighted ? true : false,\n    title: item.title,\n    liftUp: true,\n    subtitle: item.subtitle,\n    priceComponent: __jsx(Typography, {\n      variant: \"h3\",\n      color: \"textPrimary\"\n    }, \"$\", pricingOption === 'annual' ? item.annual : item.monthly),\n    features: item.features,\n    featureCheckComponent: __jsx(Icon, {\n      fontIconClass: \"far fa-check-circle\",\n      fontIconColor: theme.palette.primary.main\n    }),\n    cta: __jsx(Button, {\n      color: \"primary\",\n      variant: item.isHighlighted ? 'contained' : 'outlined',\n      fullWidth: true,\n      size: \"large\"\n    }, \"Subscribe now\"),\n    disclaimer: item.disclaimer,\n    className: classes.cardPricing\n  }))))))));\n};\n\nexport default Main;","map":null,"metadata":{},"sourceType":"module"}