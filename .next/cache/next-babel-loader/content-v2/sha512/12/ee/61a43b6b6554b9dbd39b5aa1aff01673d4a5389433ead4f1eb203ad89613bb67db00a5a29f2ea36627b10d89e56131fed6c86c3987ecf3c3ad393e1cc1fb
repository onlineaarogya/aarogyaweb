{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Avatar, colors } from '@material-ui/core';\nimport { Icon } from 'components/atoms';\nconst useStyles = makeStyles(theme => ({\n  extraSmall: {\n    width: 20,\n    height: 20\n  },\n  small: {\n    width: 50,\n    height: 50\n  },\n  medium: {\n    width: 70,\n    height: 70\n  },\n  large: {\n    width: 90,\n    height: 90\n  },\n  circle: {\n    borderRadius: '100%'\n  },\n  square: {\n    borderRadius: theme.spacing(2)\n  }\n}));\n/**\r\n * Component to display the alternate icon\r\n *\r\n * @param {Object} props\r\n */\n\nconst IconAlternate = props => {\n  const {\n    iconProps,\n    fontIconClass,\n    size,\n    color,\n    shape,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"iconProps\", \"fontIconClass\", \"size\", \"color\", \"shape\", \"className\"]);\n\n  const classes = useStyles();\n  const useBackgroundStyles = makeStyles(() => ({\n    background: {\n      background: color[50]\n    }\n  }));\n  const backgroundClasses = useBackgroundStyles();\n  return __jsx(Avatar, _extends({\n    className: clsx('icon-alternate', classes[size], classes[shape], backgroundClasses.background, className)\n  }, rest), __jsx(Icon, _extends({\n    size: size,\n    fontIconClass: fontIconClass,\n    fontIconColor: color[500],\n    className: \"icon-alternate__icon\"\n  }, iconProps)));\n};\n\nIconAlternate.defaultProps = {\n  size: 'medium',\n  shape: 'square',\n  iconProps: {}\n};\nexport default IconAlternate;","map":null,"metadata":{},"sourceType":"module"}