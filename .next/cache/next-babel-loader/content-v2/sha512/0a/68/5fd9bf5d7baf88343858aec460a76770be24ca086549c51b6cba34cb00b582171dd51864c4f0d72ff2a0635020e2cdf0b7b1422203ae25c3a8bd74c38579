{"ast":null,"code":"var _jsxFileName = \"/Users/praveensingh/Sites/aarogyaAppPro/src/views/PasswordResetCover/components/Form/Form.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid, Button, TextField } from '@material-ui/core';\nimport validate from 'validate.js';\nimport { LearnMoreLink } from 'components/atoms';\nimport { getPatientLogin } from '../../../../components/helper/PatientApi';\nimport AlertMassage from '../../../../components/helper/AlertMessage';\nimport Router from 'next/router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  }\n}));\nconst schema = {\n  otp: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    // otp: true,\n    length: {\n      maximum: 6\n    }\n  }\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === 'checkbox' ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      window.location.replace('/');\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  const [subming, setSubiting] = React.useState(false);\n  const [status, setStatusBase] = React.useState('');\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, status ? __jsx(AlertMassage, {\n    key: status.key,\n    message: status.msg,\n    status: status.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }) : null, __jsx(\"form\", {\n    name: \"password-reset-form\",\n    method: \"post\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    placeholder: \"Enter Mobile OTP\",\n    label: \"OTP *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"otp\",\n    fullWidth: true,\n    helperText: hasError('otp') ? formState.errors.otp[0] : null,\n    error: hasError('otp'),\n    onChange: handleChange,\n    type: \"number\",\n    value: formState.values.otp || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"Fields that are marked with * sign are required.\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    size: \"large\",\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Submit\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Didn't  recieve code  ?\", __jsx(LearnMoreLink, {\n    title: \"Resent OTP\",\n    href: \"/signin-cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaAppPro/src/views/PasswordResetCover/components/Form/Form.js"],"names":["React","makeStyles","Typography","Grid","Button","TextField","validate","LearnMoreLink","getPatientLogin","AlertMassage","Router","useStyles","theme","root","width","schema","otp","presence","allowEmpty","message","length","maximum","Form","classes","formState","setFormState","useState","isValid","values","touched","errors","useEffect","handleChange","event","persist","target","name","type","checked","value","handleSubmit","preventDefault","window","location","replace","hasError","field","subming","setSubiting","status","setStatusBase","key","msg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid, Button, TextField } from '@material-ui/core';\nimport validate from 'validate.js';\nimport { LearnMoreLink } from 'components/atoms';\nimport { getPatientLogin } from '../../../../components/helper/PatientApi';\nimport AlertMassage from '../../../../components/helper/AlertMessage';\nimport Router from 'next/router'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n}));\n\nconst schema = {\n  otp: {\n    presence: { allowEmpty: false, message: 'is required' },\n    // otp: true,\n    length: {\n      maximum: 6,\n    },\n  },\n};\n\nconst Form = () => {\n  const classes = useStyles();\n\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {},\n  });\n\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {},\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true,\n      },\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      window.location.replace('/');\n    }\n\n    setFormState(formState => ({\n      ...formState,\n      touched: {\n        ...formState.touched,\n        ...formState.errors,\n      },\n    }));\n  };\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n    const [subming, setSubiting] = React.useState(false);\n    const [status, setStatusBase] = React.useState('');\n\n  return (\n    <div className={classes.root}>\n    {status ? (\n      <AlertMassage\n        key={status.key}\n        message={status.msg}\n        status={status.status}\n      />\n    ) : null}\n      <form name=\"password-reset-form\" method=\"post\" onSubmit={handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              placeholder=\"Enter Mobile OTP\"\n              label=\"OTP *\"\n              variant=\"outlined\"\n              size=\"medium\"\n              name=\"otp\"\n              fullWidth\n              helperText={hasError('otp') ? formState.errors.otp[0] : null}\n              error={hasError('otp')}\n              onChange={handleChange}\n              type=\"number\"\n              value={formState.values.otp || ''}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <i>\n              <Typography variant=\"subtitle2\">\n                Fields that are marked with * sign are required.\n              </Typography>\n            </i>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"primary\"\n              fullWidth\n            >\n              Submit\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography\n              variant=\"subtitle1\"\n              color=\"textSecondary\"\n              align=\"center\"\n            >\n              Didn't  recieve code  ?  \n              <LearnMoreLink title=\"Resent OTP\" href=\"/signin-cover\" />\n            </Typography>\n          </Grid>\n        </Grid>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}