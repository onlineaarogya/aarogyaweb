{"ast":null,"code":"var _jsxFileName = \"/Users/praveensingh/Sites/aarogyaApp/src/components/organisms/CardJobTag/CardJobTag.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, colors } from '@material-ui/core';\nimport { CardBase } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    '&:hover': {\n      borderRight: `${theme.spacing(1)}px solid ${colors.red[500]}`\n    }\n  },\n  dot: {\n    display: 'inline-block',\n    width: theme.spacing(1),\n    height: theme.spacing(1),\n    background: theme.palette.text.primary,\n    borderRadius: '100%',\n    marginRight: theme.spacing(1)\n  },\n  dotBig: {\n    width: theme.spacing(2),\n    height: theme.spacing(2)\n  },\n  dotSmall: {\n    width: theme.spacing(1 / 2),\n    height: theme.spacing(1 / 2)\n  },\n  jobTitle: {\n    fontWeight: 700\n  },\n  dotMargin: {\n    margin: theme.spacing(0, 1)\n  },\n  tag: {\n    display: 'inline-block',\n    padding: theme.spacing(1 / 2),\n    borderRadius: theme.spacing(1 / 2),\n    border: '1px solid'\n  },\n  textWhite: {\n    color: 'white'\n  }\n}));\n/**\n * Component to display the job card\n *\n * @param {Object} props\n */\n\nconst CardJobTag = props => {\n  const {\n    badgeColor,\n    badgeTitle,\n    jobTitle,\n    jobLocation,\n    jobType,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"badgeColor\", \"badgeTitle\", \"jobTitle\", \"jobLocation\", \"jobType\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(CardBase, _extends({\n    className: clsx(classes.root, className),\n    align: \"left\"\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }), __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: classes.tag,\n    style: {\n      background: badgeColor,\n      borderColor: badgeColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    component: \"span\",\n    variant: \"body2\",\n    className: classes.textWhite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, badgeTitle))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.jobTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, jobTitle))), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    component: \"span\",\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, jobLocation), __jsx(\"span\", {\n    className: clsx(classes.dot, classes.dotSmall, classes.dotMargin),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), __jsx(Typography, {\n    component: \"span\",\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, jobType)))));\n};\n\nCardJobTag.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n\n  /**\n   * Badge color of the job card\n   */\n  badgeColor: PropTypes.string.isRequired,\n\n  /**\n   * Badge title of the job card\n   */\n  badgeTitle: PropTypes.string.isRequired,\n\n  /**\n   * Job title of the card\n   */\n  jobTitle: PropTypes.string.isRequired,\n\n  /**\n   * Job location of the card\n   */\n  jobLocation: PropTypes.string.isRequired,\n\n  /**\n   * Job type of the card\n   */\n  jobType: PropTypes.string.isRequired\n};\nexport default CardJobTag;","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaApp/src/components/organisms/CardJobTag/CardJobTag.js"],"names":["React","clsx","PropTypes","makeStyles","Grid","Typography","colors","CardBase","useStyles","theme","root","height","width","borderRight","spacing","red","dot","display","background","palette","text","primary","borderRadius","marginRight","dotBig","dotSmall","jobTitle","fontWeight","dotMargin","margin","tag","padding","border","textWhite","color","CardJobTag","props","badgeColor","badgeTitle","jobLocation","jobType","className","rest","classes","borderColor","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, colors } from '@material-ui/core';\nimport { CardBase } from 'components/organisms';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    '&:hover': {\n      borderRight: `${theme.spacing(1)}px solid ${colors.red[500]}`,\n    },\n  },\n  dot: {\n    display: 'inline-block',\n    width: theme.spacing(1),\n    height: theme.spacing(1),\n    background: theme.palette.text.primary,\n    borderRadius: '100%',\n    marginRight: theme.spacing(1),\n  },\n  dotBig: {\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n  },\n  dotSmall: {\n    width: theme.spacing(1 / 2),\n    height: theme.spacing(1 / 2),\n  },\n  jobTitle: {\n    fontWeight: 700,\n  },\n  dotMargin: {\n    margin: theme.spacing(0, 1),\n  },\n  tag: {\n    display: 'inline-block',\n    padding: theme.spacing(1 / 2),\n    borderRadius: theme.spacing(1 / 2),\n    border: '1px solid',\n  },\n  textWhite: {\n    color: 'white',\n  },\n}));\n\n/**\n * Component to display the job card\n *\n * @param {Object} props\n */\nconst CardJobTag = props => {\n  const {\n    badgeColor,\n    badgeTitle,\n    jobTitle,\n    jobLocation,\n    jobType,\n    className,\n    ...rest\n  } = props;\n\n  const classes = useStyles();\n\n  return (\n    <CardBase className={clsx(classes.root, className)} align=\"left\" {...rest}>\n      <>\n      <Grid container spacing={2}>\n        <Grid item container alignItems=\"center\" xs={12}>\n          <span\n            className={classes.tag}\n            style={{\n              background: badgeColor,\n              borderColor: badgeColor,\n            }}\n          >\n            <Typography\n              component=\"span\"\n              variant=\"body2\"\n              className={classes.textWhite}\n            >\n              {badgeTitle}\n            </Typography>\n          </span>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" className={classes.jobTitle}>\n            {jobTitle}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item container alignItems=\"center\" xs={12}>\n          <Typography\n            component=\"span\"\n            variant=\"subtitle1\"\n            color=\"textSecondary\"\n          >\n            {jobLocation}\n          </Typography>\n          <span\n            className={clsx(classes.dot, classes.dotSmall, classes.dotMargin)}\n          />\n          <Typography\n            component=\"span\"\n            variant=\"subtitle1\"\n            color=\"textSecondary\"\n          >\n            {jobType}\n          </Typography>\n        </Grid>\n      </Grid>\n      </>\n    </CardBase>\n  );\n};\n\nCardJobTag.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n  /**\n   * Badge color of the job card\n   */\n  badgeColor: PropTypes.string.isRequired,\n  /**\n   * Badge title of the job card\n   */\n  badgeTitle: PropTypes.string.isRequired,\n  /**\n   * Job title of the card\n   */\n  jobTitle: PropTypes.string.isRequired,\n  /**\n   * Job location of the card\n   */\n  jobLocation: PropTypes.string.isRequired,\n  /**\n   * Job type of the card\n   */\n  jobType: PropTypes.string.isRequired,\n};\n\nexport default CardJobTag;\n"]},"metadata":{},"sourceType":"module"}