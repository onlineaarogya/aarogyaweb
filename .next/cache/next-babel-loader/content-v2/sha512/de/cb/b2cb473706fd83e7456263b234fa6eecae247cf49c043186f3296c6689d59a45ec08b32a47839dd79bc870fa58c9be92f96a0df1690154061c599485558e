{"ast":null,"code":"import _extends from \"/Users/praveensingh/Sites/aarogyaApp/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/praveensingh/Sites/aarogyaApp/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/praveensingh/Sites/aarogyaApp/src/components/molecules/DescriptionCta/DescriptionCta.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography } from '@material-ui/core';\n/**\n * Component to display the description with CTA's\n *\n * @param {Object} props\n */\n\nconst DescriptionCta = props => {\n  _s();\n\n  const {\n    title,\n    subtitle,\n    primaryCta,\n    secondaryCta,\n    align,\n    className,\n    wrapperProps,\n    titleProps,\n    subtitleProps,\n    buttonGroupProps,\n    primaryButtonWrapperProps,\n    secondaryButtonWrapperProps\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"subtitle\", \"primaryCta\", \"secondaryCta\", \"align\", \"className\", \"wrapperProps\", \"titleProps\", \"subtitleProps\", \"buttonGroupProps\", \"primaryButtonWrapperProps\", \"secondaryButtonWrapperProps\"]);\n\n  const theme = useTheme();\n  const isSm = useMediaQuery(theme.breakpoints.up('sm'), {\n    defaultMatches: true\n  });\n  let justifyGrid = 'center';\n\n  if (align === 'left') {\n    justifyGrid = isSm ? 'flex-end' : 'flex-start';\n  } else if (align === 'right') {\n    justifyGrid = isSm ? 'flex-start' : 'flex-end';\n  }\n\n  return __jsx(Grid, _extends({\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: clsx('description-cta', className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), __jsx(Grid, _extends({\n    item: true,\n    className: \"description-cta__wrapper\"\n  }, wrapperProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), __jsx(Typography, _extends({\n    variant: \"h5\",\n    align: align,\n    gutterBottom: true,\n    className: \"description-cta__title\"\n  }, titleProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), title), subtitle && __jsx(Typography, _extends({\n    variant: \"subtitle1\",\n    align: align,\n    color: \"textSecondary\",\n    className: \"description-cta__subtitle\"\n  }, subtitleProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), subtitle)), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, _extends({\n    container: true,\n    justify: justifyGrid,\n    spacing: 1,\n    className: \"description-cta__button-group\"\n  }, buttonGroupProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), __jsx(Grid, _extends({\n    item: true,\n    className: \"description-cta__primary-button-wrapper\"\n  }, primaryButtonWrapperProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), primaryCta), secondaryCta && __jsx(Grid, _extends({\n    item: true,\n    className: clsx('description-cta__secondary-button-wrapper')\n  }, secondaryButtonWrapperProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), secondaryCta))));\n};\n\n_s(DescriptionCta, \"08v9Dkn8i3H8E/8E0No4aWP5IGw=\", false, function () {\n  return [useTheme, useMediaQuery];\n});\n\n_c = DescriptionCta;\nDescriptionCta.defaultProps = {\n  align: 'center',\n  wrapperProps: {},\n  titleProps: {},\n  subtitleProps: {},\n  buttonGroupProps: {},\n  primaryButtonWrapperProps: {},\n  secondaryButtonWrapperProps: {}\n};\nDescriptionCta.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n\n  /**\n   * Title of the list\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * Subtitle of the list\n   */\n  subtitle: PropTypes.string,\n\n  /**\n   * Primary CTA of the list\n   */\n  primaryCta: PropTypes.node.isRequired,\n\n  /**\n   * Secondary CTA of the list\n   */\n  secondaryCta: PropTypes.node,\n\n  /**\n   * Alignment\n   */\n  align: PropTypes.oneOf(['left', 'right', 'center']),\n\n  /**\n   * Additional properties to pass to the wrapper Grid item components\n   */\n  wrapperProps: PropTypes.object,\n\n  /**\n   * Additional properties to pass to the title Typography components\n   */\n  titleProps: PropTypes.object,\n\n  /**\n   * Additional properties to pass to the subtitle Typography components\n   */\n  subtitleProps: PropTypes.object,\n\n  /**\n   * Additional properties to pass to the button group div container\n   */\n  buttonGroupProps: PropTypes.object,\n\n  /**\n   * Additional properties to pass to the primary button wrapper div container\n   */\n  primaryButtonWrapperProps: PropTypes.object,\n\n  /**\n   * Additional properties to pass to the secondary button wrapper div container\n   */\n  secondaryButtonWrapperProps: PropTypes.object\n};\nexport default DescriptionCta;\n\nvar _c;\n\n$RefreshReg$(_c, \"DescriptionCta\");","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaApp/src/components/molecules/DescriptionCta/DescriptionCta.js"],"names":["React","clsx","PropTypes","useTheme","useMediaQuery","Grid","Typography","DescriptionCta","props","title","subtitle","primaryCta","secondaryCta","align","className","wrapperProps","titleProps","subtitleProps","buttonGroupProps","primaryButtonWrapperProps","secondaryButtonWrapperProps","rest","theme","isSm","breakpoints","up","defaultMatches","justifyGrid","defaultProps","propTypes","string","isRequired","node","oneOf","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography } from '@material-ui/core';\n\n/**\n * Component to display the description with CTA's\n *\n * @param {Object} props\n */\nconst DescriptionCta = props => {\n  const {\n    title,\n    subtitle,\n    primaryCta,\n    secondaryCta,\n    align,\n    className,\n    wrapperProps,\n    titleProps,\n    subtitleProps,\n    buttonGroupProps,\n    primaryButtonWrapperProps,\n    secondaryButtonWrapperProps,\n    ...rest\n  } = props;\n\n  const theme = useTheme();\n  const isSm = useMediaQuery(theme.breakpoints.up('sm'), {\n    defaultMatches: true,\n  });\n\n  let justifyGrid = 'center';\n  if (align === 'left') {\n    justifyGrid = isSm ? 'flex-end' : 'flex-start';\n  } else if (align === 'right') {\n    justifyGrid = isSm ? 'flex-start' : 'flex-end';\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      justify=\"space-between\"\n      alignItems=\"center\"\n      className={clsx('description-cta', className)}\n      {...rest}\n    >\n      <Grid item className=\"description-cta__wrapper\" {...wrapperProps}>\n        <Typography\n          variant=\"h5\"\n          align={align}\n          gutterBottom\n          className=\"description-cta__title\"\n          {...titleProps}\n        >\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography\n            variant=\"subtitle1\"\n            align={align}\n            color=\"textSecondary\"\n            className=\"description-cta__subtitle\"\n            {...subtitleProps}\n          >\n            {subtitle}\n          </Typography>\n        )}\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          justify={justifyGrid}\n          spacing={1}\n          className=\"description-cta__button-group\"\n          {...buttonGroupProps}\n        >\n          <Grid\n            item\n            className=\"description-cta__primary-button-wrapper\"\n            {...primaryButtonWrapperProps}\n          >\n            {primaryCta}\n          </Grid>\n          {secondaryCta && (\n            <Grid\n              item\n              className={clsx('description-cta__secondary-button-wrapper')}\n              {...secondaryButtonWrapperProps}\n            >\n              {secondaryCta}\n            </Grid>\n          )}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nDescriptionCta.defaultProps = {\n  align: 'center',\n  wrapperProps: {},\n  titleProps: {},\n  subtitleProps: {},\n  buttonGroupProps: {},\n  primaryButtonWrapperProps: {},\n  secondaryButtonWrapperProps: {},\n};\n\nDescriptionCta.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n  /**\n   * Title of the list\n   */\n  title: PropTypes.string.isRequired,\n  /**\n   * Subtitle of the list\n   */\n  subtitle: PropTypes.string,\n  /**\n   * Primary CTA of the list\n   */\n  primaryCta: PropTypes.node.isRequired,\n  /**\n   * Secondary CTA of the list\n   */\n  secondaryCta: PropTypes.node,\n  /**\n   * Alignment\n   */\n  align: PropTypes.oneOf(['left', 'right', 'center']),\n  /**\n   * Additional properties to pass to the wrapper Grid item components\n   */\n  wrapperProps: PropTypes.object,\n  /**\n   * Additional properties to pass to the title Typography components\n   */\n  titleProps: PropTypes.object,\n  /**\n   * Additional properties to pass to the subtitle Typography components\n   */\n  subtitleProps: PropTypes.object,\n  /**\n   * Additional properties to pass to the button group div container\n   */\n  buttonGroupProps: PropTypes.object,\n  /**\n   * Additional properties to pass to the primary button wrapper div container\n   */\n  primaryButtonWrapperProps: PropTypes.object,\n  /**\n   * Additional properties to pass to the secondary button wrapper div container\n   */\n  secondaryButtonWrapperProps: PropTypes.object,\n};\n\nexport default DescriptionCta;\n"]},"metadata":{},"sourceType":"module"}