{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, Typography, Box } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paused from './paused';\nimport Completed from './Completed';\nimport Upcoming from './Upcoming';\nconst useStyles = makeStyles(theme => ({\n  tabHeader: {\n    boxShadow: '0px 2px 4px -1px rgb(0 0 0 / 20%)',\n    backgroundColor: theme.palette.background.white\n  }\n}));\n\nconst Consultations = props => {\n  const {\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  }); // code for Tabs =======================================\n\n  function TabPanel(props) {\n    const {\n      children,\n      value,\n      index\n    } = props,\n          other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n    return __jsx(Typography, _extends({\n      component: \"div\",\n      role: \"tabpanel\",\n      hidden: value !== index,\n      id: `scrollable-auto-tabpanel-${index}`,\n      \"aria-labelledby\": `scrollable-auto-tab-${index}`\n    }, other), __jsx(Box, null, children));\n  }\n\n  function a11yProps(index) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`\n    };\n  } // code for tabs and\n\n\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  } // End tab ======================================================\n\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2\n  }, __jsx(AppBar, {\n    position: \"static\",\n    color: \"\",\n    className: classes.tabHeader\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    variant: \"scrollable\",\n    scrollButtons: \"auto\",\n    \"aria-label\": \"scrollable auto tabs example\"\n  }, __jsx(Tab, _extends({\n    label: \"Upcoming \"\n  }, a11yProps(0))), __jsx(Tab, _extends({\n    label: \"Paused \"\n  }, a11yProps(1))), __jsx(Tab, _extends({\n    label: \"Completed \"\n  }, a11yProps(2))))), __jsx(TabPanel, {\n    value: value,\n    index: 0\n  }, __jsx(Upcoming, null)), __jsx(TabPanel, {\n    value: value,\n    index: 1\n  }, __jsx(Paused, null)), __jsx(TabPanel, {\n    value: value,\n    index: 2\n  }, __jsx(Completed, null))));\n};\n\nexport default Consultations;","map":null,"metadata":{},"sourceType":"module"}