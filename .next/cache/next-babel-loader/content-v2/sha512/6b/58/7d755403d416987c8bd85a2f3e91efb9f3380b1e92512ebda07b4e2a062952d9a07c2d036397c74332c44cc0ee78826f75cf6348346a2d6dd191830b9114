{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider } from '@material-ui/core';\nimport { Section } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    overflow: 'hidden'\n  },\n  hero: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    maxWidth: theme.layout.contentWidth,\n    margin: '0 auto',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column-reverse'\n    }\n  },\n  heroLeftSide: {\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(3, 8)\n    },\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3, 2)\n    }\n  },\n  heroRightSide: {\n    maxWidth: '50%',\n    flex: '0 0 50%',\n    position: 'relative',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '100%',\n      flex: '0 0 100%',\n      height: '300px'\n    }\n  },\n  heroCover: {\n    position: 'relative',\n    width: '50vw',\n    height: '100%',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%'\n    }\n  },\n  heroImageContainer: {\n    height: '100%',\n    width: '100%',\n    overflow: 'hidden'\n  },\n  heroImage: {\n    position: 'absolute',\n    left: '0%',\n    width: '100%',\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      shapeOutside: 'polygon(10% 0%, 100% 0, 100% 100%, 0% 100%)',\n      clipPath: 'polygon(10% 0%, 100% 0, 100% 100%, 0% 100%)'\n    }\n  }\n}));\n/**\n * Component to display the shaped hero\n *\n * @param {Object} props\n */\n\nconst HeroShaped = props => {\n  const {\n    leftSide,\n    rightSide,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"leftSide\", \"rightSide\", \"className\"]);\n\n  const classes = useStyles();\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, 'hero-shaped', className)\n  }, rest), __jsx(\"div\", {\n    className: clsx('hero-shaped__wrapper', classes.hero)\n  }, __jsx(Section, {\n    className: clsx('hero-shaped__left-side', classes.heroLeftSide)\n  }, leftSide), __jsx(\"div\", {\n    className: clsx('hero-shaped__right-side', classes.heroRightSide)\n  }, __jsx(\"div\", {\n    className: clsx('hero-shaped__cover', classes.heroCover)\n  }, __jsx(\"div\", {\n    className: clsx('hero-shaped__image-container', classes.heroImageContainer)\n  }, __jsx(\"div\", {\n    className: clsx('hero-shaped__image', classes.heroImage)\n  }, rightSide))))), __jsx(Divider, null));\n};\n\nexport default HeroShaped;","map":null,"metadata":{},"sourceType":"module"}