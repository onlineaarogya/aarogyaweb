{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, colors } from '@material-ui/core';\nimport { Grid, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { IconAlternate } from 'components/molecules';\nimport { Accordion } from 'components/organisms';\nconst useStyles = makeStyles(theme => ({\n  title: {\n    fontWeight: 'bold'\n  },\n  accordionGrid: {\n    '& .accordion__item-wrapper': {\n      boxShadow: '0 1.5rem 4rem rgba(22,28,45,.05)'\n    }\n  },\n  fontWeightBold: {\n    fontWeight: 'bold'\n  },\n  fontWeight300: {\n    fontWeight: 300\n  },\n  listItemAvatar: {\n    marginRight: theme.spacing(2)\n  },\n  listItemText: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  },\n  answerCount: {\n    padding: theme.spacing(1 / 2, 1),\n    borderRadius: theme.spacing(1),\n    background: theme.palette.error.main,\n    color: 'white',\n    fontWeight: 700\n  }\n}));\n\nconst Questions = props => {\n  const {\n    data,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"data\", \"className\"]);\n\n  const classes = useStyles([]);\n  const {\n    url\n  } = props.api_data;\n  const items = []; // var len = oFullResponse.results.length;\n\n  props.api_data.data.forEach(function (arrayItem) {\n    // console.log(props.api_data.data.[0]);\n    items.push({\n      id: arrayItem.nid,\n      title: arrayItem.title,\n      subtitle: arrayItem.field_subtitle.substring(0, 100),\n      text: arrayItem.body.replace(/<[^>]*>?/gm, '') // link: 'Check it out',\n\n    });\n  }); // const [getData, setData] = useState([]);\n  // const fetchData = async () => {\n  //   const req = await fetch(\n  //     'https://randomuser.me/api/?gender=male&results=100',\n  //   );\n  //   const newData = await req.json();\n  //   return setData(newData.info);\n  // };\n  // const handleClick = event => {\n  //   event.preventDefault();\n  //   fetchData();\n  // };\n  // console.log('dddd', props);\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(List, null, __jsx(ListItem, {\n    disableGutters: true\n  }, __jsx(ListItemAvatar, {\n    className: classes.listItemAvatar\n  }, __jsx(IconAlternate, {\n    fontIconClass: data.icon,\n    size: \"medium\",\n    color: colors.red,\n    shape: \"circle\"\n  })), __jsx(ListItemText, {\n    primary: url,\n    secondary: `Letâ€™s try to fix your ${url} issues.`,\n    primaryTypographyProps: {\n      variant: 'h6'\n    },\n    secondaryTypographyProps: {\n      variant: 'h6'\n    }\n  })), __jsx(ListItem, {\n    disableGutters: true\n  }, __jsx(ListItemText, {\n    className: classes.listItemText,\n    primary: \"Updated Answers\",\n    secondary: `${props.api_data.data.length} answers`,\n    primaryTypographyProps: {\n      variant: 'subtitle1',\n      color: 'textSecondary'\n    },\n    secondaryTypographyProps: {\n      variant: 'body1',\n      className: classes.answerCount\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.accordionGrid\n  }, __jsx(Accordion, {\n    items: items,\n    titleProps: {\n      variant: 'subtitle1',\n      className: classes.fontWeightBold\n    },\n    subtitleProps: {\n      className: classes.fontWeight300\n    }\n  }))));\n};\n\nexport default Questions;","map":null,"metadata":{},"sourceType":"module"}