{"ast":null,"code":"var _jsxFileName = \"/Users/praveensingh/Sites/aarogyaApp/src/components/helper/AlertMassage.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Alert } from '@material-ui/lab';\nexport default function AlertMassage({\n  message\n}) {\n  _s();\n\n  const [open, setOpen] = React.useState(true);\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Snackbar, {\n    open: open,\n    autoHideDuration: 5500,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, message)));\n} // customSnackbar.propTypes = {\n//   snackValue: PropTypes.string.isRequired,\n//   // snackbar status type or validation\n//   snackStatus: PropTypes.string.isRequired,\n// };\n\n_s(AlertMassage, \"dVkDIfRb5RN4FjtonjBYYwpg89o=\");\n\n_c = AlertMassage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertMassage\");","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaApp/src/components/helper/AlertMassage.js"],"names":["React","Snackbar","IconButton","CloseIcon","Alert","AlertMassage","message","open","setOpen","useState","handleClose","event","reason","vertical","horizontal"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AAAA;;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACS,QAAN,CAAe,IAAf,CAAxB;;AACA,WAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AACDJ,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoBE,MAAC,QAAD;AACE,IAAA,IAAI,EAAED,IADR;AAEE,IAAA,gBAAgB,EAAE,IAFpB;AAGE,IAAA,OAAO,EAAEG,WAHX;AAIE,IAAA,YAAY,EAAE;AAAEG,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,WAAhB;AAA6B,IAAA,QAAQ,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,OADH,CANF,CApBF,CADF;AAiCD,C,CAED;AACA;AACA;AACA;AACA;;GAhDwBD,Y;;KAAAA,Y","sourcesContent":["import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Alert } from '@material-ui/lab';\n\nexport default function AlertMassage({ message }) {\n  const [open, setOpen] = React.useState(true);\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      {/* <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={2000}\n        onClose={handleClose}\n        variant=\"warning\"\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={message}\n        action={[\n          <IconButton key=\"close\" onClick={handleClose}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      /> */}\n      <Snackbar\n        open={open}\n        autoHideDuration={5500}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\n// customSnackbar.propTypes = {\n//   snackValue: PropTypes.string.isRequired,\n//   // snackbar status type or validation\n//   snackStatus: PropTypes.string.isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}