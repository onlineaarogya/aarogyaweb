{"ast":null,"code":"var _jsxFileName = \"/Users/praveensingh/Sites/aarogyaAppPro/src/components/atoms/Image/Image.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    height: '100%'\n  },\n  dBlock: {\n    display: 'block'\n  }\n}));\n/**\n * Component to display the images\n *\n * @param {Object} props\n */\n\nconst Image = props => {\n  const {\n    src,\n    srcSet,\n    alt,\n    lazy,\n    lazyProps,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"src\", \"srcSet\", \"alt\", \"lazy\", \"lazyProps\", \"className\"]);\n\n  const classes = useStyles();\n\n  if (lazy) {\n    return __jsx(LazyLoadImage, _extends({\n      className: clsx('image', classes.root, classes.dBlock, className),\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      effect: \"opacity\"\n    }, lazyProps, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return __jsx(\"img\", _extends({\n    className: clsx('image', classes.root, className),\n    alt: alt,\n    src: src,\n    srcSet: srcSet\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }));\n};\n\nImage.defaultProps = {\n  alt: '...',\n  lazy: true,\n  lazyProps: {\n    width: 'auto',\n    height: 'auto'\n  }\n};\nImage.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n\n  /**\n   * Source of the image\n   */\n  src: PropTypes.string.isRequired,\n\n  /**\n   * Source set for the responsive images\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * Image title\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Lazy loading properties\n   */\n  lazyProps: PropTypes.object,\n\n  /**\n   * Should lazy load the image\n   */\n  lazy: PropTypes.bool\n};\nexport default Image;","map":{"version":3,"sources":["/Users/praveensingh/Sites/aarogyaAppPro/src/components/atoms/Image/Image.js"],"names":["React","clsx","PropTypes","makeStyles","LazyLoadImage","useStyles","root","width","height","dBlock","display","Image","props","src","srcSet","alt","lazy","lazyProps","className","rest","classes","defaultProps","propTypes","string","isRequired","object","bool"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAC,OAAO;AAClCG,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE;AAFJ,GAD4B;AAKlCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH;AAL0B,CAAP,CAAD,CAA5B;AAUA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,GAAf;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA;AAArC,MAA4DN,KAAlE;AAAA,QAAyDO,IAAzD,4BAAkEP,KAAlE;;AAEA,QAAMQ,OAAO,GAAGf,SAAS,EAAzB;;AACA,MAAIW,IAAJ,EAAU;AACR,WACE,MAAC,aAAD;AACE,MAAA,SAAS,EAAEf,IAAI,CAAC,OAAD,EAAUmB,OAAO,CAACd,IAAlB,EAAwBc,OAAO,CAACX,MAAhC,EAAwCS,SAAxC,CADjB;AAEE,MAAA,GAAG,EAAEH,GAFP;AAGE,MAAA,GAAG,EAAEF,GAHP;AAIE,MAAA,MAAM,EAAEC,MAJV;AAKE,MAAA,MAAM,EAAC;AALT,OAMMG,SANN,EAOME,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAWD;;AAED,SACE;AACE,IAAA,SAAS,EAAElB,IAAI,CAAC,OAAD,EAAUmB,OAAO,CAACd,IAAlB,EAAwBY,SAAxB,CADjB;AAEE,IAAA,GAAG,EAAEH,GAFP;AAGE,IAAA,GAAG,EAAEF,GAHP;AAIE,IAAA,MAAM,EAAEC;AAJV,KAKMK,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CA3BD;;AA6BAR,KAAK,CAACU,YAAN,GAAqB;AACnBN,EAAAA,GAAG,EAAE,KADc;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,SAAS,EAAE;AACTV,IAAAA,KAAK,EAAE,MADE;AAETC,IAAAA,MAAM,EAAE;AAFC;AAHQ,CAArB;AASAG,KAAK,CAACW,SAAN,GAAkB;AAChB;AACF;AACA;AACEJ,EAAAA,SAAS,EAAEhB,SAAS,CAACqB,MAJL;;AAKhB;AACF;AACA;AACEV,EAAAA,GAAG,EAAEX,SAAS,CAACqB,MAAV,CAAiBC,UARN;;AAShB;AACF;AACA;AACEV,EAAAA,MAAM,EAAEZ,SAAS,CAACqB,MAZF;;AAahB;AACF;AACA;AACER,EAAAA,GAAG,EAAEb,SAAS,CAACqB,MAhBC;;AAiBhB;AACF;AACA;AACEN,EAAAA,SAAS,EAAEf,SAAS,CAACuB,MApBL;;AAqBhB;AACF;AACA;AACET,EAAAA,IAAI,EAAEd,SAAS,CAACwB;AAxBA,CAAlB;AA2BA,eAAef,KAAf","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    height: '100%',\n  },\n  dBlock: {\n    display: 'block',\n  },\n}));\n\n/**\n * Component to display the images\n *\n * @param {Object} props\n */\nconst Image = props => {\n  const { src, srcSet, alt, lazy, lazyProps, className, ...rest } = props;\n\n  const classes = useStyles();\n  if (lazy) {\n    return (\n      <LazyLoadImage\n        className={clsx('image', classes.root, classes.dBlock, className)}\n        alt={alt}\n        src={src}\n        srcSet={srcSet}\n        effect=\"opacity\"\n        {...lazyProps}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <img\n      className={clsx('image', classes.root, className)}\n      alt={alt}\n      src={src}\n      srcSet={srcSet}\n      {...rest}\n    />\n  );\n};\n\nImage.defaultProps = {\n  alt: '...',\n  lazy: true,\n  lazyProps: {\n    width: 'auto',\n    height: 'auto',\n  },\n};\n\nImage.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string,\n  /**\n   * Source of the image\n   */\n  src: PropTypes.string.isRequired,\n  /**\n   * Source set for the responsive images\n   */\n  srcSet: PropTypes.string,\n  /**\n   * Image title\n   */\n  alt: PropTypes.string,\n  /**\n   * Lazy loading properties\n   */\n  lazyProps: PropTypes.object,\n  /**\n   * Should lazy load the image\n   */\n  lazy: PropTypes.bool,\n};\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}